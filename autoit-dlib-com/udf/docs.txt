dlib::cca_outputs dlib::cca( const std::vector<std::vector<std::pair<ULONG, double>>>& L
                             const std::vector<std::vector<std::pair<ULONG, double>>>& R
                             ULONG                                                     num_correlations
                             ULONG                                                     extra_rank = 5
                             ULONG                                                     q = 2
                             double                                                    regularization = 0 )

AutoIt:
    dlib.cca( $L, $R, $num_correlations[, $extra_rank[, $q[, $regularization]]] ) -> retval

dlib::SpaceVector dlib::apply_cca_transform( const dlib::Matrix&                          m
                                             const std::vector<std::pair<ULONG, double>>& v )

AutoIt:
    dlib.apply_cca_transform( $m, $v ) -> retval

cv::Mat dlib::load_rgb_image( const string& path )

AutoIt:
    dlib.load_rgb_image( $path ) -> retval

cv::Mat dlib::load_grayscale_image( const string& path )

AutoIt:
    dlib.load_grayscale_image( $path ) -> retval

void dlib::save_image( const cv::Mat& img
                       const string&  path )

AutoIt:
    dlib.save_image( $img, $path ) -> None

std::vector<cv::Mat> dlib::jitter_image( const cv::Mat& img
                                         size_t         num_jitters = 1
                                         bool           disturb_colors = false )

AutoIt:
    dlib.jitter_image( $img[, $num_jitters[, $disturb_colors]] ) -> retval

cv::Mat dlib::get_face_chip( const cv::Mat&                     img
                             const dlib::full_object_detection& face
                             size_t                             size = 150
                             float                              padding = 0.25 )

AutoIt:
    dlib.get_face_chip( $img, $face[, $size[, $padding]] ) -> retval

std::vector<cv::Mat> dlib::get_face_chips( const cv::Mat&                                  img
                                           const std::vector<dlib::full_object_detection>& faces
                                           size_t                                          size = 150
                                           float                                           padding = 0.25 )

AutoIt:
    dlib.get_face_chips( $img, $faces[, $size[, $padding]] ) -> retval

void dlib::save_face_chip( const cv::Mat&                     img
                           const dlib::full_object_detection& face
                           const string&                      chip_filename
                           size_t                             size = 150
                           float                              padding = 0.25 )

AutoIt:
    dlib.save_face_chip( $img, $face, $chip_filename[, $size[, $padding]] ) -> None

void dlib::save_face_chips( const cv::Mat&                                  img
                            const std::vector<dlib::full_object_detection>& faces
                            const string&                                   chip_filename
                            size_t                                          size = 150
                            float                                           padding = 0.25 )

AutoIt:
    dlib.save_face_chips( $img, $faces, $chip_filename[, $size[, $padding]] ) -> None

std::vector<ULONG> dlib::chinese_whispers_clustering( std::vector<dlib::SpaceVector> descriptors
                                                      float                          threshold )

AutoIt:
    dlib.chinese_whispers_clustering( $descriptors, $threshold ) -> retval

std::vector<ULONG> dlib::chinese_whispers( std::vector<dlib::SpaceVector> edges )

AutoIt:
    dlib.chinese_whispers( $edges ) -> retval

void dlib::find_candidate_object_locations( cv::Mat&                         image
                                            std::vector<dlib::rectangle>&    rects
                                            std::tuple<double, double, long> kvals = std::tuple<double, double, long>(50, 200, 3)
                                            ULONG                            min_size = 20
                                            ULONG                            max_merging_iterations = 50 )

AutoIt:
    dlib.find_candidate_object_locations( $image[, $kvals[, $min_size[, $max_merging_iterations[, $rects]]]] ) -> rects

std::vector<long> dlib::max_cost_assignment( const dlib::Matrix& cost )

AutoIt:
    dlib.max_cost_assignment( $cost ) -> retval

double dlib::assignment_cost( const dlib::Matrix& cost
                              std::vector<long>&  assignment )

AutoIt:
    dlib.assignment_cost( $cost, $assignment ) -> retval

void dlib::make_sparse_vector( std::vector<std::pair<ULONG, double>>& v )

AutoIt:
    dlib.make_sparse_vector( [$v] ) -> v

void dlib::make_sparse_vector( std::vector<std::vector<std::pair<ULONG, double>>>& v )

AutoIt:
    dlib.make_sparse_vector( [$v] ) -> v

void dlib::save_libsvm_formatted_data( const string&                                             file_name
                                       const std::vector<std::vector<std::pair<ULONG, double>>>& samples
                                       const std::vector<double>&                                labels )

AutoIt:
    dlib.save_libsvm_formatted_data( $file_name, $samples, $labels ) -> None

void dlib::hit_enter_to_continue()

AutoIt:
    dlib.hit_enter_to_continue() -> None

dlib::segmenter_type dlib::train_sequence_segmenter( const std::vector<std::vector<dlib::SpaceVector>>&       samples
                                                     const std::vector<std::vector<std::pair<ULONG, ULONG>>>& segments
                                                     dlib::segmenter_params                                   params = segmenter_params() )

AutoIt:
    dlib.train_sequence_segmenter( $samples, $segments[, $params] ) -> retval

dlib::segmenter_type dlib::train_sequence_segmenter( const std::vector<std::vector<std::vector<std::pair<ULONG, double>>>>& samples
                                                     const std::vector<std::vector<std::pair<ULONG, ULONG>>>&               segments
                                                     dlib::segmenter_params                                                 params = segmenter_params() )

AutoIt:
    dlib.train_sequence_segmenter( $samples, $segments[, $params] ) -> retval

dlib::segmenter_test dlib::test_sequence_segmenter( const dlib::segmenter_type&                              segmenter
                                                    const std::vector<std::vector<dlib::SpaceVector>>&       samples
                                                    const std::vector<std::vector<std::pair<ULONG, ULONG>>>& segments )

AutoIt:
    dlib.test_sequence_segmenter( $segmenter, $samples, $segments ) -> retval

dlib::segmenter_test dlib::test_sequence_segmenter( const dlib::segmenter_type&                                            segmenter
                                                    const std::vector<std::vector<std::vector<std::pair<ULONG, double>>>>& samples
                                                    const std::vector<std::vector<std::pair<ULONG, ULONG>>>&               segments )

AutoIt:
    dlib.test_sequence_segmenter( $segmenter, $samples, $segments ) -> retval

dlib::segmenter_test dlib::cross_validate_sequence_segmenter( const std::vector<std::vector<dlib::SpaceVector>>&       samples
                                                              const std::vector<std::vector<std::pair<ULONG, ULONG>>>& segments
                                                              long                                                     folds
                                                              dlib::segmenter_params                                   params = segmenter_params() )

AutoIt:
    dlib.cross_validate_sequence_segmenter( $samples, $segments, $folds[, $params] ) -> retval

dlib::segmenter_test dlib::cross_validate_sequence_segmenter( const std::vector<std::vector<std::vector<std::pair<ULONG, double>>>>& samples
                                                              const std::vector<std::vector<std::pair<ULONG, ULONG>>>&               segments
                                                              long                                                                   folds
                                                              dlib::segmenter_params                                                 params = segmenter_params() )

AutoIt:
    dlib.cross_validate_sequence_segmenter( $samples, $segments, $folds[, $params] ) -> retval

void dlib::train_shape_predictor( const string&                                 dataset_filename
                                  const string&                                 predictor_output_filename
                                  const dlib::shape_predictor_training_options& options )

AutoIt:
    dlib.train_shape_predictor( $dataset_filename, $predictor_output_filename, $options ) -> None

dlib::shape_predictor dlib::train_shape_predictor( std::vector<cv::Mat>&                                  images
                                                   std::vector<std::vector<dlib::full_object_detection>>& detections
                                                   dlib::shape_predictor_training_options&                options )

AutoIt:
    dlib.train_shape_predictor( $images, $detections, $options ) -> retval

void dlib::train_simple_object_detector( const string&                                        dataset_filename
                                         const string&                                        detector_output_filename
                                         const dlib::simple_object_detector_training_options& options )

AutoIt:
    dlib.train_simple_object_detector( $dataset_filename, $detector_output_filename, $options ) -> None

dlib::simple_object_detector_com dlib::train_simple_object_detector( const std::vector<cv::Mat>&                          images
                                                                     std::vector<std::vector<dlib::rectangle>>&           boxes
                                                                     const dlib::simple_object_detector_training_options& options )

AutoIt:
    dlib.train_simple_object_detector( $images, $boxes, $options ) -> retval

dlib::simple_test_results dlib::test_simple_object_detector( const string& dataset_filename
                                                             const string& detector_filename
                                                             const int     upsampling_amount = -1 )

AutoIt:
    dlib.test_simple_object_detector( $dataset_filename, $detector_filename[, $upsampling_amount] ) -> retval

dlib::simple_test_results dlib::test_simple_object_detector( const string&               dataset_filename
                                                             dlib::fhog_object_detector& detector
                                                             const int                   upsampling_amount = -1 )

AutoIt:
    dlib.test_simple_object_detector( $dataset_filename, $detector[, $upsampling_amount] ) -> retval

dlib::simple_test_results dlib::test_simple_object_detector( const string&                     dataset_filename
                                                             dlib::simple_object_detector_com& detector
                                                             const int                         upsampling_amount = -1 )

AutoIt:
    dlib.test_simple_object_detector( $dataset_filename, $detector[, $upsampling_amount] ) -> retval

dlib::simple_test_results dlib::test_simple_object_detector( const std::vector<cv::Mat>&                images
                                                             std::vector<std::vector<dlib::rectangle>>& boxes
                                                             dlib::fhog_object_detector&                detector
                                                             const int                                  upsampling_amount = -1 )

AutoIt:
    dlib.test_simple_object_detector( $images, $boxes, $detector[, $upsampling_amount] ) -> retval

dlib::simple_test_results dlib::test_simple_object_detector( const std::vector<cv::Mat>&                images
                                                             std::vector<std::vector<dlib::rectangle>>& boxes
                                                             dlib::simple_object_detector_com&          detector
                                                             const int                                  upsampling_amount = -1 )

AutoIt:
    dlib.test_simple_object_detector( $images, $boxes, $detector[, $upsampling_amount] ) -> retval

dlib::SpaceVector dlib::solve_structural_svm_problem( dlib::simple_structural_svm_problem& problem )

AutoIt:
    dlib.solve_structural_svm_problem( $problem ) -> retval

ULONG dlib::max_index_plus_one( std::vector<std::pair<ULONG, double>>& v )

AutoIt:
    dlib.max_index_plus_one( $v ) -> retval

bool dlib::dnn_prefer_fastest_algorithms()

AutoIt:
    dlib.dnn_prefer_fastest_algorithms() -> retval

void dlib::set_dnn_prefer_fastest_algorithms()

AutoIt:
    dlib.set_dnn_prefer_fastest_algorithms() -> None

void dlib::set_dnn_prefer_smallest_algorithms()

AutoIt:
    dlib.set_dnn_prefer_smallest_algorithms() -> None

dlib::_normalized_decision_function_radial_basis dlib::auto_train_rbf_classifier( std::vector<dlib::SpaceVector>& x
                                                                                  std::vector<double>&            y
                                                                                  double                          max_runtime_seconds
                                                                                  bool                            be_verbose = true )

AutoIt:
    dlib.auto_train_rbf_classifier( $x, $y, $max_runtime_seconds[, $be_verbose] ) -> retval

dlib::_normalized_decision_function_radial_basis dlib::auto_train_rbf_classifier( cv::Mat&             x
                                                                                  std::vector<double>& y
                                                                                  double               max_runtime_seconds
                                                                                  bool                 be_verbose = true )

AutoIt:
    dlib.auto_train_rbf_classifier( $x, $y, $max_runtime_seconds[, $be_verbose] ) -> retval

dlib::_normalized_decision_function_radial_basis dlib::reduce( dlib::_normalized_decision_function_radial_basis& df
                                                               std::vector<dlib::SpaceVector>&                   x
                                                               long                                              num_basis_vectors
                                                               double                                            eps = 1e-3 )

AutoIt:
    dlib.reduce( $df, $x, $num_basis_vectors[, $eps] ) -> retval

dlib::_normalized_decision_function_radial_basis dlib::reduce( dlib::_normalized_decision_function_radial_basis& df
                                                               cv::Mat&                                          x
                                                               long                                              num_basis_vectors
                                                               double                                            eps = 1e-3 )

AutoIt:
    dlib.reduce( $df, $x, $num_basis_vectors[, $eps] ) -> retval

dlib::binary_test dlib::test_binary_decision_function( dlib::_normalized_decision_function_radial_basis& dec_funct
                                                       std::vector<dlib::SpaceVector>&                   samples
                                                       std::vector<double>&                              labels )

AutoIt:
    dlib.test_binary_decision_function( $dec_funct, $samples, $labels ) -> retval

dlib::binary_test dlib::test_binary_decision_function( dlib::_normalized_decision_function_radial_basis& dec_funct
                                                       cv::Mat&                                          samples
                                                       std::vector<double>&                              labels )

AutoIt:
    dlib.test_binary_decision_function( $dec_funct, $samples, $labels ) -> retval

dlib::binary_test dlib::test_binary_decision_function( dlib::_decision_function_linear& dec_funct
                                                       std::vector<dlib::SpaceVector>&  samples
                                                       std::vector<double>&             labels )

AutoIt:
    dlib.test_binary_decision_function( $dec_funct, $samples, $labels ) -> retval

dlib::binary_test dlib::test_binary_decision_function( dlib::_decision_function_linear& dec_funct
                                                       cv::Mat&                         samples
                                                       std::vector<double>&             labels )

AutoIt:
    dlib.test_binary_decision_function( $dec_funct, $samples, $labels ) -> retval

dlib::binary_test dlib::test_binary_decision_function( dlib::_decision_function_sparse_linear&             dec_funct
                                                       std::vector<std::vector<std::pair<ULONG, double>>>& samples
                                                       std::vector<double>&                                labels )

AutoIt:
    dlib.test_binary_decision_function( $dec_funct, $samples, $labels ) -> retval

dlib::binary_test dlib::test_binary_decision_function( dlib::_decision_function_radial_basis& dec_funct
                                                       std::vector<dlib::SpaceVector>&        samples
                                                       std::vector<double>&                   labels )

AutoIt:
    dlib.test_binary_decision_function( $dec_funct, $samples, $labels ) -> retval

dlib::binary_test dlib::test_binary_decision_function( dlib::_decision_function_radial_basis& dec_funct
                                                       cv::Mat&                               samples
                                                       std::vector<double>&                   labels )

AutoIt:
    dlib.test_binary_decision_function( $dec_funct, $samples, $labels ) -> retval

dlib::binary_test dlib::test_binary_decision_function( dlib::_decision_function_sparse_radial_basis&       dec_funct
                                                       std::vector<std::vector<std::pair<ULONG, double>>>& samples
                                                       std::vector<double>&                                labels )

AutoIt:
    dlib.test_binary_decision_function( $dec_funct, $samples, $labels ) -> retval

dlib::binary_test dlib::test_binary_decision_function( dlib::_decision_function_polynomial& dec_funct
                                                       std::vector<dlib::SpaceVector>&      samples
                                                       std::vector<double>&                 labels )

AutoIt:
    dlib.test_binary_decision_function( $dec_funct, $samples, $labels ) -> retval

dlib::binary_test dlib::test_binary_decision_function( dlib::_decision_function_polynomial& dec_funct
                                                       cv::Mat&                             samples
                                                       std::vector<double>&                 labels )

AutoIt:
    dlib.test_binary_decision_function( $dec_funct, $samples, $labels ) -> retval

dlib::binary_test dlib::test_binary_decision_function( dlib::_decision_function_sparse_polynomial&         dec_funct
                                                       std::vector<std::vector<std::pair<ULONG, double>>>& samples
                                                       std::vector<double>&                                labels )

AutoIt:
    dlib.test_binary_decision_function( $dec_funct, $samples, $labels ) -> retval

dlib::binary_test dlib::test_binary_decision_function( dlib::_decision_function_histogram_intersection& dec_funct
                                                       std::vector<dlib::SpaceVector>&                  samples
                                                       std::vector<double>&                             labels )

AutoIt:
    dlib.test_binary_decision_function( $dec_funct, $samples, $labels ) -> retval

dlib::binary_test dlib::test_binary_decision_function( dlib::_decision_function_histogram_intersection& dec_funct
                                                       cv::Mat&                                         samples
                                                       std::vector<double>&                             labels )

AutoIt:
    dlib.test_binary_decision_function( $dec_funct, $samples, $labels ) -> retval

dlib::binary_test dlib::test_binary_decision_function( dlib::_decision_function_sparse_histogram_intersection& dec_funct
                                                       std::vector<std::vector<std::pair<ULONG, double>>>&     samples
                                                       std::vector<double>&                                    labels )

AutoIt:
    dlib.test_binary_decision_function( $dec_funct, $samples, $labels ) -> retval

dlib::binary_test dlib::test_binary_decision_function( dlib::_decision_function_sigmoid& dec_funct
                                                       std::vector<dlib::SpaceVector>&   samples
                                                       std::vector<double>&              labels )

AutoIt:
    dlib.test_binary_decision_function( $dec_funct, $samples, $labels ) -> retval

dlib::binary_test dlib::test_binary_decision_function( dlib::_decision_function_sigmoid& dec_funct
                                                       cv::Mat&                          samples
                                                       std::vector<double>&              labels )

AutoIt:
    dlib.test_binary_decision_function( $dec_funct, $samples, $labels ) -> retval

dlib::binary_test dlib::test_binary_decision_function( dlib::_decision_function_sparse_sigmoid&            dec_funct
                                                       std::vector<std::vector<std::pair<ULONG, double>>>& samples
                                                       std::vector<double>&                                labels )

AutoIt:
    dlib.test_binary_decision_function( $dec_funct, $samples, $labels ) -> retval

dlib::regression_test dlib::test_regression_function( dlib::_decision_function_linear& dec_funct
                                                      std::vector<dlib::SpaceVector>&  samples
                                                      std::vector<double>&             labels )

AutoIt:
    dlib.test_regression_function( $dec_funct, $samples, $labels ) -> retval

dlib::regression_test dlib::test_regression_function( dlib::_decision_function_linear& dec_funct
                                                      cv::Mat&                         samples
                                                      std::vector<double>&             labels )

AutoIt:
    dlib.test_regression_function( $dec_funct, $samples, $labels ) -> retval

dlib::regression_test dlib::test_regression_function( dlib::_decision_function_sparse_linear&             dec_funct
                                                      std::vector<std::vector<std::pair<ULONG, double>>>& samples
                                                      std::vector<double>&                                labels )

AutoIt:
    dlib.test_regression_function( $dec_funct, $samples, $labels ) -> retval

dlib::regression_test dlib::test_regression_function( dlib::_decision_function_radial_basis& dec_funct
                                                      std::vector<dlib::SpaceVector>&        samples
                                                      std::vector<double>&                   labels )

AutoIt:
    dlib.test_regression_function( $dec_funct, $samples, $labels ) -> retval

dlib::regression_test dlib::test_regression_function( dlib::_decision_function_radial_basis& dec_funct
                                                      cv::Mat&                               samples
                                                      std::vector<double>&                   labels )

AutoIt:
    dlib.test_regression_function( $dec_funct, $samples, $labels ) -> retval

dlib::regression_test dlib::test_regression_function( dlib::_decision_function_sparse_radial_basis&       dec_funct
                                                      std::vector<std::vector<std::pair<ULONG, double>>>& samples
                                                      std::vector<double>&                                labels )

AutoIt:
    dlib.test_regression_function( $dec_funct, $samples, $labels ) -> retval

dlib::regression_test dlib::test_regression_function( dlib::_decision_function_polynomial& dec_funct
                                                      std::vector<dlib::SpaceVector>&      samples
                                                      std::vector<double>&                 labels )

AutoIt:
    dlib.test_regression_function( $dec_funct, $samples, $labels ) -> retval

dlib::regression_test dlib::test_regression_function( dlib::_decision_function_polynomial& dec_funct
                                                      cv::Mat&                             samples
                                                      std::vector<double>&                 labels )

AutoIt:
    dlib.test_regression_function( $dec_funct, $samples, $labels ) -> retval

dlib::regression_test dlib::test_regression_function( dlib::_decision_function_sparse_polynomial&         dec_funct
                                                      std::vector<std::vector<std::pair<ULONG, double>>>& samples
                                                      std::vector<double>&                                labels )

AutoIt:
    dlib.test_regression_function( $dec_funct, $samples, $labels ) -> retval

dlib::regression_test dlib::test_regression_function( dlib::_decision_function_histogram_intersection& dec_funct
                                                      std::vector<dlib::SpaceVector>&                  samples
                                                      std::vector<double>&                             labels )

AutoIt:
    dlib.test_regression_function( $dec_funct, $samples, $labels ) -> retval

dlib::regression_test dlib::test_regression_function( dlib::_decision_function_histogram_intersection& dec_funct
                                                      cv::Mat&                                         samples
                                                      std::vector<double>&                             labels )

AutoIt:
    dlib.test_regression_function( $dec_funct, $samples, $labels ) -> retval

dlib::regression_test dlib::test_regression_function( dlib::_decision_function_sparse_histogram_intersection& dec_funct
                                                      std::vector<std::vector<std::pair<ULONG, double>>>&     samples
                                                      std::vector<double>&                                    labels )

AutoIt:
    dlib.test_regression_function( $dec_funct, $samples, $labels ) -> retval

dlib::regression_test dlib::test_regression_function( dlib::_decision_function_sigmoid& dec_funct
                                                      std::vector<dlib::SpaceVector>&   samples
                                                      std::vector<double>&              labels )

AutoIt:
    dlib.test_regression_function( $dec_funct, $samples, $labels ) -> retval

dlib::regression_test dlib::test_regression_function( dlib::_decision_function_sigmoid& dec_funct
                                                      cv::Mat&                          samples
                                                      std::vector<double>&              labels )

AutoIt:
    dlib.test_regression_function( $dec_funct, $samples, $labels ) -> retval

dlib::regression_test dlib::test_regression_function( dlib::_decision_function_sparse_sigmoid&            dec_funct
                                                      std::vector<std::vector<std::pair<ULONG, double>>>& samples
                                                      std::vector<double>&                                labels )

AutoIt:
    dlib.test_regression_function( $dec_funct, $samples, $labels ) -> retval

dlib::ranking_test dlib::test_ranking_function( dlib::_decision_function_linear&     dec_funct
                                                std::vector<dlib::vec_ranking_pair>& samples )

AutoIt:
    dlib.test_ranking_function( $dec_funct, $samples ) -> retval

dlib::ranking_test dlib::test_ranking_function( dlib::_decision_function_linear& dec_funct
                                                dlib::vec_ranking_pair&          sample )

AutoIt:
    dlib.test_ranking_function( $dec_funct, $sample ) -> retval

dlib::ranking_test dlib::test_ranking_function( dlib::_decision_function_sparse_linear& dec_funct
                                                std::vector<dlib::sparse_ranking_pair>& samples )

AutoIt:
    dlib.test_ranking_function( $dec_funct, $samples ) -> retval

dlib::ranking_test dlib::test_ranking_function( dlib::_decision_function_sparse_linear& dec_funct
                                                dlib::sparse_ranking_pair&              sample )

AutoIt:
    dlib.test_ranking_function( $dec_funct, $sample ) -> retval

_variant_t dlib::variant( void* ptr )

AutoIt:
    dlib.variant( $ptr ) -> retval

double dlib::signed_distance_to_line( dlib::line   l
                                      dlib::dpoint p )

AutoIt:
    dlib.signed_distance_to_line( $l, $p ) -> retval

double dlib::signed_distance_to_line( dlib::line  l
                                      dlib::point p )

AutoIt:
    dlib.signed_distance_to_line( $l, $p ) -> retval

double dlib::distance_to_line( dlib::line   l
                               dlib::dpoint p )

AutoIt:
    dlib.distance_to_line( $l, $p ) -> retval

double dlib::distance_to_line( dlib::line  l
                               dlib::point p )

AutoIt:
    dlib.distance_to_line( $l, $p ) -> retval

dlib::dpoint dlib::intersect( dlib::line a
                              dlib::line b )

AutoIt:
    dlib.intersect( $a, $b ) -> retval

double dlib::angle_between_lines( dlib::line a
                                  dlib::line b )

AutoIt:
    dlib.angle_between_lines( $a, $b ) -> retval

double dlib::count_points_on_side_of_line( dlib::line                l
                                           dlib::dpoint              reference_point
                                           std::vector<dlib::dpoint> pts
                                           double                    dist_thresh_min = 0
                                           double                    dist_thresh_max = std::numeric_limits<double>::infinity() )

AutoIt:
    dlib.count_points_on_side_of_line( $l, $reference_point, $pts[, $dist_thresh_min[, $dist_thresh_max]] ) -> retval

double dlib::count_points_on_side_of_line( dlib::line               l
                                           dlib::dpoint             reference_point
                                           std::vector<dlib::point> pts
                                           double                   dist_thresh_min = 0
                                           double                   dist_thresh_max = std::numeric_limits<double>::infinity() )

AutoIt:
    dlib.count_points_on_side_of_line( $l, $reference_point, $pts[, $dist_thresh_min[, $dist_thresh_max]] ) -> retval

double dlib::count_points_between_lines( dlib::line                l1
                                         dlib::line                l2
                                         dlib::dpoint              reference_point
                                         std::vector<dlib::dpoint> pts )

AutoIt:
    dlib.count_points_between_lines( $l1, $l2, $reference_point, $pts ) -> retval

double dlib::count_points_between_lines( dlib::line               l1
                                         dlib::line               l2
                                         dlib::dpoint             reference_point
                                         std::vector<dlib::point> pts )

AutoIt:
    dlib.count_points_between_lines( $l1, $l2, $reference_point, $pts ) -> retval

double dlib::dot( dlib::Matrix& a
                  dlib::Matrix& b )

AutoIt:
    dlib.dot( $a, $b ) -> retval

double dlib::dot( dlib::SpaceVector& a
                  dlib::SpaceVector& b )

AutoIt:
    dlib.dot( $a, $b ) -> retval

double dlib::dot( dlib::dpoint& a
                  dlib::dpoint& b )

AutoIt:
    dlib.dot( $a, $b ) -> retval

double dlib::dot( dlib::point& a
                  dlib::point& b )

AutoIt:
    dlib.dot( $a, $b ) -> retval

dlib::fhog_object_detector dlib::get_frontal_face_detector()

AutoIt:
    dlib.get_frontal_face_detector() -> retval

ULONG dlib::num_separable_filters( dlib::fhog_object_detector& detector )

AutoIt:
    dlib.num_separable_filters( $detector ) -> retval

ULONG dlib::num_separable_filters( dlib::simple_object_detector_com& detector )

AutoIt:
    dlib.num_separable_filters( $detector ) -> retval

dlib::fhog_object_detector dlib::threshold_filter_singular_values( dlib::fhog_object_detector& detector
                                                                   double                      thresh
                                                                   ULONG                       weight_index = 0 )

AutoIt:
    dlib.threshold_filter_singular_values( $detector, $thresh[, $weight_index] ) -> retval

dlib::simple_object_detector_com dlib::threshold_filter_singular_values( dlib::simple_object_detector_com& detector
                                                                         double                            thresh
                                                                         ULONG                             weight_index = 0 )

AutoIt:
    dlib.threshold_filter_singular_values( $detector, $thresh[, $weight_index] ) -> retval

void dlib::load_libsvm_formatted_data( string&                                             file_name
                                       std::vector<std::vector<std::pair<ULONG, double>>>& samples
                                       std::vector<double>&                                labels )

AutoIt:
    dlib.load_libsvm_formatted_data( $file_name[, $samples[, $labels]] ) -> samples, labels

size_t dlib::count_steps_without_decrease( std::vector<double>& time_series
                                           double               probability_of_decrease = 0.51 )

AutoIt:
    dlib.count_steps_without_decrease( $time_series[, $probability_of_decrease] ) -> retval

size_t dlib::count_steps_without_decrease_robust( std::vector<double>& time_series
                                                  double               probability_of_decrease = 0.51
                                                  double               quantile_discard = 0.1 )

AutoIt:
    dlib.count_steps_without_decrease_robust( $time_series[, $probability_of_decrease[, $quantile_discard]] ) -> retval

double dlib::probability_that_sequence_is_increasing( std::vector<double>& time_series
                                                      double               thresh = 0 )

AutoIt:
    dlib.probability_that_sequence_is_increasing( $time_series[, $thresh] ) -> retval

dlib::rect_filter dlib::find_optimal_rect_filter( std::vector<dlib::rectangle> rects
                                                  double                       smoothness = 1 )

AutoIt:
    dlib.find_optimal_rect_filter( $rects[, $smoothness] ) -> retval

dlib::rectangle dlib::translate_rect( dlib::rectangle rect
                                      dlib::point     p )

AutoIt:
    dlib.translate_rect( $rect, $p ) -> retval

dlib::rectangle dlib::translate_rect( dlib::rectangle rect
                                      dlib::dpoint    p )

AutoIt:
    dlib.translate_rect( $rect, $p ) -> retval

dlib::drectangle dlib::translate_rect( dlib::drectangle rect
                                       dlib::point      p )

AutoIt:
    dlib.translate_rect( $rect, $p ) -> retval

dlib::drectangle dlib::translate_rect( dlib::drectangle rect
                                       dlib::dpoint     p )

AutoIt:
    dlib.translate_rect( $rect, $p ) -> retval

dlib::rectangle dlib::shrink_rect( dlib::rectangle rect
                                   long            num )

AutoIt:
    dlib.shrink_rect( $rect, $num ) -> retval

dlib::drectangle dlib::shrink_rect( dlib::drectangle rect
                                    double           num )

AutoIt:
    dlib.shrink_rect( $rect, $num ) -> retval

dlib::rectangle dlib::scale_rect( dlib::rectangle rect
                                  double          scale )

AutoIt:
    dlib.scale_rect( $rect, $scale ) -> retval

dlib::drectangle dlib::scale_rect( dlib::drectangle rect
                                   double           scale )

AutoIt:
    dlib.scale_rect( $rect, $scale ) -> retval

dlib::rectangle dlib::centered_rect( dlib::point p
                                     ULONG       width
                                     ULONG       height )

AutoIt:
    dlib.centered_rect( $p, $width, $height ) -> retval

dlib::rectangle dlib::centered_rect( dlib::rectangle rect
                                     ULONG           width
                                     ULONG           height )

AutoIt:
    dlib.centered_rect( $rect, $width, $height ) -> retval

dlib::rectangle dlib::centered_rect( long  x
                                     long  y
                                     ULONG width
                                     ULONG height )

AutoIt:
    dlib.centered_rect( $x, $y, $width, $height ) -> retval

dlib::point dlib::center( dlib::rectangle rect )

AutoIt:
    dlib.center( $rect ) -> retval

dlib::dpoint dlib::center( dlib::drectangle rect )

AutoIt:
    dlib.center( $rect ) -> retval

std::vector<dlib::rectangle> dlib::centered_rects( std::vector<dlib::point> pts
                                                   ULONG                    width
                                                   ULONG                    height )

AutoIt:
    dlib.centered_rects( $pts, $width, $height ) -> retval

dlib::drectangle dlib::centered_drect( dlib::dpoint p
                                       double       width
                                       double       height )

AutoIt:
    dlib.centered_drect( $p, $width, $height ) -> retval

dlib::drectangle dlib::centered_drect( dlib::drectangle rect
                                       double           width
                                       double           height )

AutoIt:
    dlib.centered_drect( $rect, $width, $height ) -> retval

double dlib::test_shape_predictor( string dataset_filename
                                   string predictor_filename )

AutoIt:
    dlib.test_shape_predictor( $dataset_filename, $predictor_filename ) -> retval

double dlib::test_shape_predictor( std::vector<cv::Mat>&                                  images
                                   std::vector<std::vector<dlib::full_object_detection>>& detections
                                   std::vector<std::vector<double>>&                      scales
                                   dlib::shape_predictor&                                 predictor )

AutoIt:
    dlib.test_shape_predictor( $images, $detections, $scales, $predictor ) -> retval

double dlib::test_shape_predictor( std::vector<cv::Mat>&                                  images
                                   std::vector<std::vector<dlib::full_object_detection>>& detections
                                   dlib::shape_predictor&                                 predictor
                                   std::vector<std::vector<double>>&                      scales = vector_vector_double() )

AutoIt:
    dlib.test_shape_predictor( $images, $detections, $predictor[, $scales] ) -> retval

dlib::binary_test dlib::cross_validate_trainer( dlib::svm_c_trainer_radial_basis samples
                                                std::vector<dlib::SpaceVector>   x
                                                std::vector<double>              y
                                                ULONG                            folds )

AutoIt:
    dlib.cross_validate_trainer( $samples, $x, $y, $folds ) -> retval

dlib::binary_test dlib::cross_validate_trainer( dlib::svm_c_trainer_sparse_radial_basis            samples
                                                std::vector<std::vector<std::pair<ULONG, double>>> x
                                                std::vector<double>                                y
                                                ULONG                                              folds )

AutoIt:
    dlib.cross_validate_trainer( $samples, $x, $y, $folds ) -> retval

dlib::binary_test dlib::cross_validate_trainer( dlib::svm_c_trainer_histogram_intersection samples
                                                std::vector<dlib::SpaceVector>             x
                                                std::vector<double>                        y
                                                ULONG                                      folds )

AutoIt:
    dlib.cross_validate_trainer( $samples, $x, $y, $folds ) -> retval

dlib::binary_test dlib::cross_validate_trainer( dlib::svm_c_trainer_sparse_histogram_intersection  samples
                                                std::vector<std::vector<std::pair<ULONG, double>>> x
                                                std::vector<double>                                y
                                                ULONG                                              folds )

AutoIt:
    dlib.cross_validate_trainer( $samples, $x, $y, $folds ) -> retval

dlib::binary_test dlib::cross_validate_trainer( dlib::svm_c_trainer_linear     samples
                                                std::vector<dlib::SpaceVector> x
                                                std::vector<double>            y
                                                ULONG                          folds )

AutoIt:
    dlib.cross_validate_trainer( $samples, $x, $y, $folds ) -> retval

dlib::binary_test dlib::cross_validate_trainer( dlib::svm_c_trainer_sparse_linear                  samples
                                                std::vector<std::vector<std::pair<ULONG, double>>> x
                                                std::vector<double>                                y
                                                ULONG                                              folds )

AutoIt:
    dlib.cross_validate_trainer( $samples, $x, $y, $folds ) -> retval

dlib::binary_test dlib::cross_validate_trainer( dlib::rvm_trainer_radial_basis samples
                                                std::vector<dlib::SpaceVector> x
                                                std::vector<double>            y
                                                ULONG                          folds )

AutoIt:
    dlib.cross_validate_trainer( $samples, $x, $y, $folds ) -> retval

dlib::binary_test dlib::cross_validate_trainer( dlib::rvm_trainer_sparse_radial_basis              samples
                                                std::vector<std::vector<std::pair<ULONG, double>>> x
                                                std::vector<double>                                y
                                                ULONG                                              folds )

AutoIt:
    dlib.cross_validate_trainer( $samples, $x, $y, $folds ) -> retval

dlib::binary_test dlib::cross_validate_trainer( dlib::rvm_trainer_histogram_intersection samples
                                                std::vector<dlib::SpaceVector>           x
                                                std::vector<double>                      y
                                                ULONG                                    folds )

AutoIt:
    dlib.cross_validate_trainer( $samples, $x, $y, $folds ) -> retval

dlib::binary_test dlib::cross_validate_trainer( dlib::rvm_trainer_sparse_histogram_intersection    samples
                                                std::vector<std::vector<std::pair<ULONG, double>>> x
                                                std::vector<double>                                y
                                                ULONG                                              folds )

AutoIt:
    dlib.cross_validate_trainer( $samples, $x, $y, $folds ) -> retval

dlib::binary_test dlib::cross_validate_trainer( dlib::rvm_trainer_linear       samples
                                                std::vector<dlib::SpaceVector> x
                                                std::vector<double>            y
                                                ULONG                          folds )

AutoIt:
    dlib.cross_validate_trainer( $samples, $x, $y, $folds ) -> retval

dlib::binary_test dlib::cross_validate_trainer( dlib::rvm_trainer_sparse_linear                    samples
                                                std::vector<std::vector<std::pair<ULONG, double>>> x
                                                std::vector<double>                                y
                                                ULONG                                              folds )

AutoIt:
    dlib.cross_validate_trainer( $samples, $x, $y, $folds ) -> retval

dlib::binary_test dlib::cross_validate_trainer_threaded( dlib::svm_c_trainer_radial_basis samples
                                                         std::vector<dlib::SpaceVector>   x
                                                         std::vector<double>              y
                                                         ULONG                            folds
                                                         ULONG                            num_threads )

AutoIt:
    dlib.cross_validate_trainer_threaded( $samples, $x, $y, $folds, $num_threads ) -> retval

dlib::binary_test dlib::cross_validate_trainer_threaded( dlib::svm_c_trainer_sparse_radial_basis            samples
                                                         std::vector<std::vector<std::pair<ULONG, double>>> x
                                                         std::vector<double>                                y
                                                         ULONG                                              folds
                                                         ULONG                                              num_threads )

AutoIt:
    dlib.cross_validate_trainer_threaded( $samples, $x, $y, $folds, $num_threads ) -> retval

dlib::binary_test dlib::cross_validate_trainer_threaded( dlib::svm_c_trainer_histogram_intersection samples
                                                         std::vector<dlib::SpaceVector>             x
                                                         std::vector<double>                        y
                                                         ULONG                                      folds
                                                         ULONG                                      num_threads )

AutoIt:
    dlib.cross_validate_trainer_threaded( $samples, $x, $y, $folds, $num_threads ) -> retval

dlib::binary_test dlib::cross_validate_trainer_threaded( dlib::svm_c_trainer_sparse_histogram_intersection  samples
                                                         std::vector<std::vector<std::pair<ULONG, double>>> x
                                                         std::vector<double>                                y
                                                         ULONG                                              folds
                                                         ULONG                                              num_threads )

AutoIt:
    dlib.cross_validate_trainer_threaded( $samples, $x, $y, $folds, $num_threads ) -> retval

dlib::binary_test dlib::cross_validate_trainer_threaded( dlib::svm_c_trainer_linear     samples
                                                         std::vector<dlib::SpaceVector> x
                                                         std::vector<double>            y
                                                         ULONG                          folds
                                                         ULONG                          num_threads )

AutoIt:
    dlib.cross_validate_trainer_threaded( $samples, $x, $y, $folds, $num_threads ) -> retval

dlib::binary_test dlib::cross_validate_trainer_threaded( dlib::svm_c_trainer_sparse_linear                  samples
                                                         std::vector<std::vector<std::pair<ULONG, double>>> x
                                                         std::vector<double>                                y
                                                         ULONG                                              folds
                                                         ULONG                                              num_threads )

AutoIt:
    dlib.cross_validate_trainer_threaded( $samples, $x, $y, $folds, $num_threads ) -> retval

dlib::binary_test dlib::cross_validate_trainer_threaded( dlib::rvm_trainer_radial_basis samples
                                                         std::vector<dlib::SpaceVector> x
                                                         std::vector<double>            y
                                                         ULONG                          folds
                                                         ULONG                          num_threads )

AutoIt:
    dlib.cross_validate_trainer_threaded( $samples, $x, $y, $folds, $num_threads ) -> retval

dlib::binary_test dlib::cross_validate_trainer_threaded( dlib::rvm_trainer_sparse_radial_basis              samples
                                                         std::vector<std::vector<std::pair<ULONG, double>>> x
                                                         std::vector<double>                                y
                                                         ULONG                                              folds
                                                         ULONG                                              num_threads )

AutoIt:
    dlib.cross_validate_trainer_threaded( $samples, $x, $y, $folds, $num_threads ) -> retval

dlib::binary_test dlib::cross_validate_trainer_threaded( dlib::rvm_trainer_histogram_intersection samples
                                                         std::vector<dlib::SpaceVector>           x
                                                         std::vector<double>                      y
                                                         ULONG                                    folds
                                                         ULONG                                    num_threads )

AutoIt:
    dlib.cross_validate_trainer_threaded( $samples, $x, $y, $folds, $num_threads ) -> retval

dlib::binary_test dlib::cross_validate_trainer_threaded( dlib::rvm_trainer_sparse_histogram_intersection    samples
                                                         std::vector<std::vector<std::pair<ULONG, double>>> x
                                                         std::vector<double>                                y
                                                         ULONG                                              folds
                                                         ULONG                                              num_threads )

AutoIt:
    dlib.cross_validate_trainer_threaded( $samples, $x, $y, $folds, $num_threads ) -> retval

dlib::binary_test dlib::cross_validate_trainer_threaded( dlib::rvm_trainer_linear       samples
                                                         std::vector<dlib::SpaceVector> x
                                                         std::vector<double>            y
                                                         ULONG                          folds
                                                         ULONG                          num_threads )

AutoIt:
    dlib.cross_validate_trainer_threaded( $samples, $x, $y, $folds, $num_threads ) -> retval

dlib::binary_test dlib::cross_validate_trainer_threaded( dlib::rvm_trainer_sparse_linear                    samples
                                                         std::vector<std::vector<std::pair<ULONG, double>>> x
                                                         std::vector<double>                                y
                                                         ULONG                                              folds
                                                         ULONG                                              num_threads )

AutoIt:
    dlib.cross_validate_trainer_threaded( $samples, $x, $y, $folds, $num_threads ) -> retval

dlib::ranking_test dlib::cross_validate_ranking_trainer( dlib::vec_svm_rank_trainer          trainer
                                                         std::vector<dlib::vec_ranking_pair> samples
                                                         ULONG                               folds )

AutoIt:
    dlib.cross_validate_ranking_trainer( $trainer, $samples, $folds ) -> retval

dlib::ranking_test dlib::cross_validate_ranking_trainer( dlib::svm_rank_trainer_sparse          trainer
                                                         std::vector<dlib::sparse_ranking_pair> samples
                                                         ULONG                                  folds )

AutoIt:
    dlib.cross_validate_ranking_trainer( $trainer, $samples, $folds ) -> retval

dlib::point_transform_projective dlib::inv( dlib::point_transform_projective& trans )

AutoIt:
    dlib.inv( $trans ) -> retval

dlib::point_transform_projective dlib::find_projective_transform( std::vector<dlib::dpoint>& from_points
                                                                  std::vector<dlib::dpoint>& to_points )

AutoIt:
    dlib.find_projective_transform( $from_points, $to_points ) -> retval

dlib::point_transform_projective dlib::find_projective_transform( dlib::Matrix& from_points
                                                                  dlib::Matrix& to_points )

AutoIt:
    dlib.find_projective_transform( $from_points, $to_points ) -> retval

dlib::point_transform_projective dlib::find_projective_transform( cv::Mat& from_points
                                                                  cv::Mat& to_points )

AutoIt:
    dlib.find_projective_transform( $from_points, $to_points ) -> retval

double dlib::polygon_area( std::vector<dlib::dpoint>& pts )

AutoIt:
    dlib.polygon_area( $pts ) -> retval

double dlib::length( dlib::dpoint& p )

AutoIt:
    dlib.length( $p ) -> retval

double dlib::length( dlib::point& p )

AutoIt:
    dlib.length( $p ) -> retval

dlib::binary_test dlib::binary_test::create()

AutoIt:
    dlib.binary_test.create() -> <dlib.binary_test object>

dlib::binary_test dlib::binary_test::create()

AutoIt:
    dlib.binary_test.create() -> <dlib.binary_test object>

string dlib::binary_test::ToString()

AutoIt:
    dlib.binary_test.ToString() -> retval

dlib::regression_test dlib::regression_test::create()

AutoIt:
    dlib.regression_test.create() -> <dlib.regression_test object>

dlib::regression_test dlib::regression_test::create()

AutoIt:
    dlib.regression_test.create() -> <dlib.regression_test object>

string dlib::regression_test::ToString()

AutoIt:
    dlib.regression_test.ToString() -> retval

dlib::ranking_test dlib::ranking_test::create()

AutoIt:
    dlib.ranking_test.create() -> <dlib.ranking_test object>

dlib::ranking_test dlib::ranking_test::create()

AutoIt:
    dlib.ranking_test.create() -> <dlib.ranking_test object>

string dlib::ranking_test::ToString()

AutoIt:
    dlib.ranking_test.ToString() -> retval

dlib::cca_outputs dlib::cca_outputs::create()

AutoIt:
    dlib.cca_outputs.create() -> <dlib.cca_outputs object>

dlib::cnn_face_detection_model_v1 dlib::cnn_face_detection_model_v1::create( const string& model_filename )

AutoIt:
    dlib.cnn_face_detection_model_v1.create( $model_filename ) -> <dlib.cnn_face_detection_model_v1 object>

std::vector<dlib::mmod_rect> dlib::cnn_face_detection_model_v1::detect( const cv::Mat& img
                                                                        const int      upsample_num_times = 0 )

AutoIt:
    dlib.cnn_face_detection_model_v1.detect( $img[, $upsample_num_times] ) -> retval

std::vector<dlib::mmod_rect> dlib::cnn_face_detection_model_v1::get_call( const cv::Mat& img
                                                                          const int      upsample_num_times = 0 )

AutoIt:
    dlib.cnn_face_detection_model_v1.call( $img[, $upsample_num_times] ) -> retval
    dlib.cnn_face_detection_model_v1( $img[, $upsample_num_times] ) -> retval

std::vector<std::vector<dlib::mmod_rect>> dlib::cnn_face_detection_model_v1::get_call( const std::vector<cv::Mat>& imgs
                                                                                       const int                   upsample_num_times = 0
                                                                                       const int                   batch_size = 128 )

AutoIt:
    dlib.cnn_face_detection_model_v1.call( $imgs[, $upsample_num_times[, $batch_size]] ) -> retval
    dlib.cnn_face_detection_model_v1( $imgs[, $upsample_num_times[, $batch_size]] ) -> retval

std::vector<std::vector<dlib::mmod_rect>> dlib::cnn_face_detection_model_v1::detect_multi( const std::vector<cv::Mat>& imgs
                                                                                           const int                   upsample_num_times = 0
                                                                                           const int                   batch_size = 128 )

AutoIt:
    dlib.cnn_face_detection_model_v1.detect_multi( $imgs[, $upsample_num_times[, $batch_size]] ) -> retval

dlib::face_recognition_model_v1 dlib::face_recognition_model_v1::create( const string& model_filename )

AutoIt:
    dlib.face_recognition_model_v1.create( $model_filename ) -> <dlib.face_recognition_model_v1 object>

dlib::SpaceVector dlib::face_recognition_model_v1::compute_face_descriptor( const cv::Mat&                     image
                                                                            const dlib::full_object_detection& face
                                                                            const int                          num_jitters = 0
                                                                            float                              padding = 0.25 )

AutoIt:
    dlib.face_recognition_model_v1.compute_face_descriptor( $image, $face[, $num_jitters[, $padding]] ) -> retval

dlib::SpaceVector dlib::face_recognition_model_v1::compute_face_descriptor( const cv::Mat& image
                                                                            const int      num_jitters = 0 )

AutoIt:
    dlib.face_recognition_model_v1.compute_face_descriptor( $image[, $num_jitters] ) -> retval

std::vector<dlib::SpaceVector> dlib::face_recognition_model_v1::compute_face_descriptor( const cv::Mat&                                  image
                                                                                         const std::vector<dlib::full_object_detection>& faces
                                                                                         const int                                       num_jitters = 0
                                                                                         float                                           padding = 0.25 )

AutoIt:
    dlib.face_recognition_model_v1.compute_face_descriptor( $image, $faces[, $num_jitters[, $padding]] ) -> retval

std::vector<std::vector<dlib::SpaceVector>> dlib::face_recognition_model_v1::compute_face_descriptor( const std::vector<cv::Mat>&                                  images
                                                                                                      const std::vector<std::vector<dlib::full_object_detection>>& batch_faces
                                                                                                      const int                                                    num_jitters = 0
                                                                                                      float                                                        padding = 0.25 )

AutoIt:
    dlib.face_recognition_model_v1.compute_face_descriptor( $images, $batch_faces[, $num_jitters[, $padding]] ) -> retval

std::vector<dlib::SpaceVector> dlib::face_recognition_model_v1::compute_face_descriptor( const std::vector<cv::Mat>& images
                                                                                         const int                   num_jitters = 0 )

AutoIt:
    dlib.face_recognition_model_v1.compute_face_descriptor( $images[, $num_jitters] ) -> retval

dlib::_row dlib::_row::create()

AutoIt:
    dlib._row.create() -> <dlib._row object>

dlib::_row dlib::_row::create()

AutoIt:
    dlib._row.create() -> <dlib._row object>

dlib::_row dlib::_row::create( double* data_
                               long    size_ )

AutoIt:
    dlib._row.create( $size_[, $data_] ) -> <dlib._row object>

string dlib::_row::ToString()

AutoIt:
    dlib._row.ToString() -> retval

double dlib::_row::get( long r )

AutoIt:
    dlib._row.get( $r ) -> retval

void dlib::_row::set( long   r
                      double val )

AutoIt:
    dlib._row.set( $r, $val ) -> None

dlib::segmenter_type dlib::segmenter_type::create()

AutoIt:
    dlib.segmenter_type.create() -> <dlib.segmenter_type object>

dlib::segmenter_type dlib::segmenter_type::create()

AutoIt:
    dlib.segmenter_type.create() -> <dlib.segmenter_type object>

std::vector<std::pair<ULONG, ULONG>> dlib::segmenter_type::get_call( const std::vector<dlib::SpaceVector>& x )

AutoIt:
    dlib.segmenter_type.call( $x ) -> retval
    dlib.segmenter_type( $x ) -> retval

std::vector<std::pair<ULONG, ULONG>> dlib::segmenter_type::get_call( const std::vector<std::vector<std::pair<ULONG, double>>>& x )

AutoIt:
    dlib.segmenter_type.call( $x ) -> retval
    dlib.segmenter_type( $x ) -> retval

dlib::segmenter_params dlib::segmenter_params::create()

AutoIt:
    dlib.segmenter_params.create() -> <dlib.segmenter_params object>

dlib::segmenter_params dlib::segmenter_params::create()

AutoIt:
    dlib.segmenter_params.create() -> <dlib.segmenter_params object>

string dlib::segmenter_params::ToString()

AutoIt:
    dlib.segmenter_params.ToString() -> retval

dlib::segmenter_test dlib::segmenter_test::create()

AutoIt:
    dlib.segmenter_test.create() -> <dlib.segmenter_test object>

string dlib::segmenter_test::ToString()

AutoIt:
    dlib.segmenter_test.ToString() -> retval

dlib::shape_predictor_training_options dlib::shape_predictor_training_options::create()

AutoIt:
    dlib.shape_predictor_training_options.create() -> <dlib.shape_predictor_training_options object>

dlib::shape_predictor_training_options dlib::shape_predictor_training_options::create()

AutoIt:
    dlib.shape_predictor_training_options.create() -> <dlib.shape_predictor_training_options object>

string dlib::shape_predictor_training_options::ToString()

AutoIt:
    dlib.shape_predictor_training_options.ToString() -> retval

dlib::simple_object_detector_training_options dlib::simple_object_detector_training_options::create()

AutoIt:
    dlib.simple_object_detector_training_options.create() -> <dlib.simple_object_detector_training_options object>

dlib::simple_object_detector_training_options dlib::simple_object_detector_training_options::create()

AutoIt:
    dlib.simple_object_detector_training_options.create() -> <dlib.simple_object_detector_training_options object>

string dlib::simple_object_detector_training_options::ToString()

AutoIt:
    dlib.simple_object_detector_training_options.ToString() -> retval

dlib::simple_test_results dlib::simple_test_results::create()

AutoIt:
    dlib.simple_test_results.create() -> <dlib.simple_test_results object>

string dlib::simple_test_results::ToString()

AutoIt:
    dlib.simple_test_results.ToString() -> retval

dlib::simple_object_detector_com dlib::simple_object_detector_com::create()

AutoIt:
    dlib.simple_object_detector.create() -> <dlib.simple_object_detector_com object>

dlib::simple_object_detector_com dlib::simple_object_detector_com::create()

AutoIt:
    dlib.simple_object_detector.create() -> <dlib.simple_object_detector_com object>

dlib::simple_object_detector_com dlib::simple_object_detector_com::create( dlib::fhog_object_detector& _detector
                                                                           uint                        _upsampling_amount = 0 )

AutoIt:
    dlib.simple_object_detector.create( $_detector[, $_upsampling_amount] ) -> <dlib.simple_object_detector_com object>

dlib::simple_object_detector_com dlib::simple_object_detector_com::create( std::vector<dlib::simple_object_detector_com>& detectors )

AutoIt:
    dlib.simple_object_detector.create( $detectors ) -> <dlib.simple_object_detector_com object>

std::shared_ptr<dlib::simple_object_detector_com> dlib::simple_object_detector_com::create( const string& filename )

AutoIt:
    dlib.simple_object_detector.create( $filename ) -> retval

std::vector<dlib::rectangle> dlib::simple_object_detector_com::get_call( cv::Mat&   img
                                                                         const uint upsampling_amount_ )

AutoIt:
    dlib.simple_object_detector.call( $img, $upsampling_amount_ ) -> retval
    dlib.simple_object_detector( $img, $upsampling_amount_ ) -> retval

std::vector<dlib::rectangle> dlib::simple_object_detector_com::get_call( cv::Mat& img )

AutoIt:
    dlib.simple_object_detector.call( $img ) -> retval
    dlib.simple_object_detector( $img ) -> retval

void dlib::simple_object_detector_com::run_multiple( std::vector<dlib::fhog_object_detector> vectors
                                                     cv::Mat                                 image
                                                     std::vector<dlib::rectangle>            rectangles
                                                     std::vector<double>                     detection_confidences
                                                     std::vector<ULONG>                      weight_indices
                                                     uint                                    upsample_num_times = 0
                                                     double                                  adjust_threshold = 0.0 )

AutoIt:
    dlib.simple_object_detector.run_multiple( $vectors, $image[, $upsample_num_times[, $adjust_threshold[, $rectangles[, $detection_confidences[, $weight_indices]]]]] ) -> rectangles, detection_confidences, weight_indices

void dlib::simple_object_detector_com::run_multiple( std::vector<dlib::simple_object_detector_com> vectors
                                                     cv::Mat                                       image
                                                     std::vector<dlib::rectangle>                  rectangles
                                                     std::vector<double>                           detection_confidences
                                                     std::vector<ULONG>                            weight_indices
                                                     uint                                          upsample_num_times = 0
                                                     double                                        adjust_threshold = 0.0 )

AutoIt:
    dlib.simple_object_detector.run_multiple( $vectors, $image[, $upsample_num_times[, $adjust_threshold[, $rectangles[, $detection_confidences[, $weight_indices]]]]] ) -> rectangles, detection_confidences, weight_indices

dlib::simple_structural_svm_problem dlib::simple_structural_svm_problem::create()

AutoIt:
    dlib.structural_svm_problem.create() -> <dlib.simple_structural_svm_problem object>

dlib::simple_structural_svm_problem dlib::simple_structural_svm_problem::create()

AutoIt:
    dlib.structural_svm_problem.create() -> <dlib.simple_structural_svm_problem object>

dlib::mmod_rect dlib::mmod_rect::create()

AutoIt:
    dlib.mmod_rectangle.create() -> <dlib.mmod_rect object>

dlib::mmod_rect dlib::mmod_rect::create( dlib::rectangle rect = rectangle()
                                         double          detection_confidence = 0
                                         string          label = string() )

AutoIt:
    dlib.mmod_rectangle.create( [$rect[, $detection_confidence[, $label]]] ) -> <dlib.mmod_rect object>

void dlib::cuda::set_device( int device )

AutoIt:
    dlib.cuda.set_device( $device ) -> None

int dlib::cuda::get_device()

AutoIt:
    dlib.cuda.get_device() -> retval

string dlib::cuda::get_device_name( int device )

AutoIt:
    dlib.cuda.get_device_name( $device ) -> retval

void dlib::cuda::set_current_device_blocking_sync()

AutoIt:
    dlib.cuda.set_current_device_blocking_sync() -> None

bool dlib::cuda::can_access_peer( int device_id
                                  int peer_device_id )

AutoIt:
    dlib.cuda.can_access_peer( $device_id, $peer_device_id ) -> retval

void dlib::cuda::device_synchronize( int device_id )

AutoIt:
    dlib.cuda.device_synchronize( $device_id ) -> None

dlib::correlation_tracker dlib::correlation_tracker::create()

AutoIt:
    dlib.correlation_tracker.create() -> <dlib.correlation_tracker object>

void dlib::correlation_tracker::start_track( cv::Mat          image
                                             dlib::drectangle bounding_box )

AutoIt:
    dlib.correlation_tracker.start_track( $image, $bounding_box ) -> None

void dlib::correlation_tracker::start_track( cv::Mat         image
                                             dlib::rectangle bounding_box )

AutoIt:
    dlib.correlation_tracker.start_track( $image, $bounding_box ) -> None

double dlib::correlation_tracker::update( cv::Mat image )

AutoIt:
    dlib.correlation_tracker.update( $image ) -> retval

double dlib::correlation_tracker::update( cv::Mat          image
                                          dlib::drectangle bounding_box )

AutoIt:
    dlib.correlation_tracker.update( $image, $bounding_box ) -> retval

double dlib::correlation_tracker::update( cv::Mat         image
                                          dlib::rectangle bounding_box )

AutoIt:
    dlib.correlation_tracker.update( $image, $bounding_box ) -> retval

dlib::drectangle dlib::correlation_tracker::get_position()

AutoIt:
    dlib.correlation_tracker.get_position() -> retval

dlib::_radial_basis_kernel dlib::_radial_basis_kernel::create()

AutoIt:
    dlib._radial_basis_kernel.create() -> <dlib._radial_basis_kernel object>

dlib::_linear_kernel dlib::_linear_kernel::create()

AutoIt:
    dlib._linear_kernel.create() -> <dlib._linear_kernel object>

dlib::_decision_function_linear dlib::_decision_function_linear::create()

AutoIt:
    dlib._decision_function_linear.create() -> <dlib._decision_function_linear object>

double dlib::_decision_function_linear::get_call( dlib::SpaceVector sample )

AutoIt:
    dlib._decision_function_linear.call( $sample ) -> retval
    dlib._decision_function_linear( $sample ) -> retval

dlib::_decision_function_sparse_linear dlib::_decision_function_sparse_linear::create()

AutoIt:
    dlib._decision_function_sparse_linear.create() -> <dlib._decision_function_sparse_linear object>

double dlib::_decision_function_sparse_linear::get_call( std::vector<std::pair<ULONG, double>> sample )

AutoIt:
    dlib._decision_function_sparse_linear.call( $sample ) -> retval
    dlib._decision_function_sparse_linear( $sample ) -> retval

dlib::_decision_function_histogram_intersection dlib::_decision_function_histogram_intersection::create()

AutoIt:
    dlib._decision_function_histogram_intersection.create() -> <dlib._decision_function_histogram_intersection object>

double dlib::_decision_function_histogram_intersection::get_call( dlib::SpaceVector sample )

AutoIt:
    dlib._decision_function_histogram_intersection.call( $sample ) -> retval
    dlib._decision_function_histogram_intersection( $sample ) -> retval

dlib::_decision_function_sparse_histogram_intersection dlib::_decision_function_sparse_histogram_intersection::create()

AutoIt:
    dlib._decision_function_sparse_histogram_intersection.create() -> <dlib._decision_function_sparse_histogram_intersection object>

double dlib::_decision_function_sparse_histogram_intersection::get_call( std::vector<std::pair<ULONG, double>> sample )

AutoIt:
    dlib._decision_function_sparse_histogram_intersection.call( $sample ) -> retval
    dlib._decision_function_sparse_histogram_intersection( $sample ) -> retval

dlib::_decision_function_polynomial dlib::_decision_function_polynomial::create()

AutoIt:
    dlib._decision_function_polynomial.create() -> <dlib._decision_function_polynomial object>

double dlib::_decision_function_polynomial::get_call( dlib::SpaceVector sample )

AutoIt:
    dlib._decision_function_polynomial.call( $sample ) -> retval
    dlib._decision_function_polynomial( $sample ) -> retval

dlib::_decision_function_sparse_polynomial dlib::_decision_function_sparse_polynomial::create()

AutoIt:
    dlib._decision_function_sparse_polynomial.create() -> <dlib._decision_function_sparse_polynomial object>

double dlib::_decision_function_sparse_polynomial::get_call( std::vector<std::pair<ULONG, double>> sample )

AutoIt:
    dlib._decision_function_sparse_polynomial.call( $sample ) -> retval
    dlib._decision_function_sparse_polynomial( $sample ) -> retval

dlib::_decision_function_radial_basis dlib::_decision_function_radial_basis::create()

AutoIt:
    dlib._decision_function_radial_basis.create() -> <dlib._decision_function_radial_basis object>

double dlib::_decision_function_radial_basis::get_call( dlib::SpaceVector sample )

AutoIt:
    dlib._decision_function_radial_basis.call( $sample ) -> retval
    dlib._decision_function_radial_basis( $sample ) -> retval

dlib::_decision_function_sparse_radial_basis dlib::_decision_function_sparse_radial_basis::create()

AutoIt:
    dlib._decision_function_sparse_radial_basis.create() -> <dlib._decision_function_sparse_radial_basis object>

double dlib::_decision_function_sparse_radial_basis::get_call( std::vector<std::pair<ULONG, double>> sample )

AutoIt:
    dlib._decision_function_sparse_radial_basis.call( $sample ) -> retval
    dlib._decision_function_sparse_radial_basis( $sample ) -> retval

dlib::_decision_function_sigmoid dlib::_decision_function_sigmoid::create()

AutoIt:
    dlib._decision_function_sigmoid.create() -> <dlib._decision_function_sigmoid object>

double dlib::_decision_function_sigmoid::get_call( dlib::SpaceVector sample )

AutoIt:
    dlib._decision_function_sigmoid.call( $sample ) -> retval
    dlib._decision_function_sigmoid( $sample ) -> retval

dlib::_decision_function_sparse_sigmoid dlib::_decision_function_sparse_sigmoid::create()

AutoIt:
    dlib._decision_function_sparse_sigmoid.create() -> <dlib._decision_function_sparse_sigmoid object>

double dlib::_decision_function_sparse_sigmoid::get_call( std::vector<std::pair<ULONG, double>> sample )

AutoIt:
    dlib._decision_function_sparse_sigmoid.call( $sample ) -> retval
    dlib._decision_function_sparse_sigmoid( $sample ) -> retval

dlib::_normalized_decision_function_radial_basis dlib::_normalized_decision_function_radial_basis::create()

AutoIt:
    dlib._normalized_decision_function_radial_basis.create() -> <dlib._normalized_decision_function_radial_basis object>

double dlib::_normalized_decision_function_radial_basis::get_call( dlib::SpaceVector& sample )

AutoIt:
    dlib._normalized_decision_function_radial_basis.call( $sample ) -> retval
    dlib._normalized_decision_function_radial_basis( $sample ) -> retval

std::vector<double> dlib::_normalized_decision_function_radial_basis::batch_predict( std::vector<dlib::SpaceVector>& samples )

AutoIt:
    dlib._normalized_decision_function_radial_basis.batch_predict( $samples ) -> retval

std::vector<double> dlib::_normalized_decision_function_radial_basis::batch_predict( cv::Mat& samples )

AutoIt:
    dlib._normalized_decision_function_radial_basis.batch_predict( $samples ) -> retval

dlib::image_window dlib::image_window::create()

AutoIt:
    dlib.image_window.create() -> <dlib.image_window object>

std::shared_ptr<dlib::image_window> dlib::image_window::create( dlib::fhog_object_detector& detector )

AutoIt:
    dlib.image_window.create( $detector ) -> retval

std::shared_ptr<dlib::image_window> dlib::image_window::create( dlib::simple_object_detector_com& detector )

AutoIt:
    dlib.image_window.create( $detector ) -> retval

std::shared_ptr<dlib::image_window> dlib::image_window::create( dlib::fhog_object_detector& detector
                                                                string                      title )

AutoIt:
    dlib.image_window.create( $detector, $title ) -> retval

std::shared_ptr<dlib::image_window> dlib::image_window::create( dlib::simple_object_detector_com& detector
                                                                string                            title )

AutoIt:
    dlib.image_window.create( $detector, $title ) -> retval

std::shared_ptr<dlib::image_window> dlib::image_window::create( cv::Mat& img )

AutoIt:
    dlib.image_window.create( $img ) -> retval

std::shared_ptr<dlib::image_window> dlib::image_window::create( cv::Mat& img
                                                                string   title )

AutoIt:
    dlib.image_window.create( $img, $title ) -> retval

void dlib::image_window::set_image( dlib::fhog_object_detector& detector )

AutoIt:
    dlib.image_window.set_image( $detector ) -> None

void dlib::image_window::set_image( dlib::simple_object_detector_com& detector )

AutoIt:
    dlib.image_window.set_image( $detector ) -> None

void dlib::image_window::set_image( cv::Mat& img )

AutoIt:
    dlib.image_window.set_image( $img ) -> None

void dlib::image_window::set_title( string title )

AutoIt:
    dlib.image_window.set_title( $title ) -> None

void dlib::image_window::clear_overlay()

AutoIt:
    dlib.image_window.clear_overlay() -> None

void dlib::image_window::add_overlay( std::vector<dlib::rectangle> rectangles
                                      dlib::rgb_pixel              color = rgb_pixel(255, 0, 0) )

AutoIt:
    dlib.image_window.add_overlay( $rectangles[, $color] ) -> None

void dlib::image_window::add_overlay( std::vector<dlib::rectangle>    rectangles
                                      std::tuple<uchar, uchar, uchar> color = {255, 0, 0} )

AutoIt:
    dlib.image_window.add_overlay( $rectangles[, $color] ) -> None

void dlib::image_window::add_overlay( std::vector<dlib::drectangle> drectangles
                                      dlib::rgb_pixel               color = rgb_pixel(255, 0, 0) )

AutoIt:
    dlib.image_window.add_overlay( $drectangles[, $color] ) -> None

void dlib::image_window::add_overlay( std::vector<dlib::drectangle>   drectangles
                                      std::tuple<uchar, uchar, uchar> color = {255, 0, 0} )

AutoIt:
    dlib.image_window.add_overlay( $drectangles[, $color] ) -> None

void dlib::image_window::add_overlay( std::vector<_variant_t> objs
                                      dlib::rgb_pixel         color = rgb_pixel(255, 0, 0) )

AutoIt:
    dlib.image_window.add_overlay( $objs[, $color] ) -> None

void dlib::image_window::add_overlay( std::vector<_variant_t>         objs
                                      std::tuple<uchar, uchar, uchar> color = {255, 0, 0} )

AutoIt:
    dlib.image_window.add_overlay( $objs[, $color] ) -> None

void dlib::image_window::add_overlay( dlib::rectangle rect
                                      dlib::rgb_pixel color = rgb_pixel(255, 0, 0) )

AutoIt:
    dlib.image_window.add_overlay( $rect[, $color] ) -> None

void dlib::image_window::add_overlay( dlib::rectangle                 rect
                                      std::tuple<uchar, uchar, uchar> color = {255, 0, 0} )

AutoIt:
    dlib.image_window.add_overlay( $rect[, $color] ) -> None

void dlib::image_window::add_overlay( dlib::drectangle drect
                                      dlib::rgb_pixel  color = rgb_pixel(255, 0, 0) )

AutoIt:
    dlib.image_window.add_overlay( $drect[, $color] ) -> None

void dlib::image_window::add_overlay( dlib::drectangle                drect
                                      std::tuple<uchar, uchar, uchar> color = {255, 0, 0} )

AutoIt:
    dlib.image_window.add_overlay( $drect[, $color] ) -> None

void dlib::image_window::add_overlay( dlib::full_object_detection& detection
                                      dlib::rgb_pixel              color = rgb_pixel(0, 0, 255) )

AutoIt:
    dlib.image_window.add_overlay( $detection[, $color] ) -> None

void dlib::image_window::add_overlay( dlib::full_object_detection&    detection
                                      std::tuple<uchar, uchar, uchar> color = {0, 0, 255} )

AutoIt:
    dlib.image_window.add_overlay( $detection[, $color] ) -> None

void dlib::image_window::add_overlay( dlib::line      l
                                      dlib::rgb_pixel color = rgb_pixel(255, 0, 0) )

AutoIt:
    dlib.image_window.add_overlay( $l[, $color] ) -> None

void dlib::image_window::add_overlay( dlib::line                      l
                                      std::tuple<uchar, uchar, uchar> color = {255, 0, 0} )

AutoIt:
    dlib.image_window.add_overlay( $l[, $color] ) -> None

void dlib::image_window::add_overlay_circle( dlib::point     center
                                             double          radius
                                             dlib::rgb_pixel color = rgb_pixel(255, 0, 0) )

AutoIt:
    dlib.image_window.add_overlay_circle( $center, $radius[, $color] ) -> None

void dlib::image_window::add_overlay_circle( dlib::point                     center
                                             double                          radius
                                             std::tuple<uchar, uchar, uchar> color = {255, 0, 0} )

AutoIt:
    dlib.image_window.add_overlay_circle( $center, $radius[, $color] ) -> None

void dlib::image_window::add_overlay_circle( dlib::dpoint    center
                                             double          radius
                                             dlib::rgb_pixel color = rgb_pixel(255, 0, 0) )

AutoIt:
    dlib.image_window.add_overlay_circle( $center, $radius[, $color] ) -> None

void dlib::image_window::add_overlay_circle( dlib::dpoint                    center
                                             double                          radius
                                             std::tuple<uchar, uchar, uchar> color = {255, 0, 0} )

AutoIt:
    dlib.image_window.add_overlay_circle( $center, $radius[, $color] ) -> None

void dlib::image_window::wait_until_closed()

AutoIt:
    dlib.image_window.wait_until_closed() -> None

bool dlib::image_window::is_closed()

AutoIt:
    dlib.image_window.is_closed() -> retval

bool dlib::image_window::get_next_double_click( dlib::point p )

AutoIt:
    dlib.image_window.get_next_double_click( [$p] ) -> retval, p

void dlib::image_window::wait_for_keypress( char wait_key )

AutoIt:
    dlib.image_window.wait_for_keypress( $wait_key ) -> None

void dlib::image_window::wait_for_keypress( string wait_key )

AutoIt:
    dlib.image_window.wait_for_keypress( $wait_key ) -> None

bool dlib::image_window::get_next_keypress( char*&           key
                                            bool*&           is_printable
                                            std::vector<int> mods
                                            bool             get_keyboard_modifiers = false )

AutoIt:
    dlib.image_window.get_next_keypress( [$get_keyboard_modifiers[, $key[, $is_printable[, $mods]]]] ) -> retval, key, is_printable, mods

dlib::rgb_pixel dlib::rgb_pixel::create()

AutoIt:
    dlib.rgb_pixel.create() -> <dlib.rgb_pixel object>

dlib::rgb_pixel dlib::rgb_pixel::create( uchar red
                                         uchar blue
                                         uchar green )

AutoIt:
    dlib.rgb_pixel.create( $red, $blue, $green ) -> <dlib.rgb_pixel object>

bool cv::haveImageReader( string filename )

AutoIt:
    cv.haveImageReader( $filename ) -> retval

bool cv::haveImageWriter( string filename )

AutoIt:
    cv.haveImageWriter( $filename ) -> retval

size_t cv::imcount( string filename
                    int    flags = IMREAD_ANYCOLOR )

AutoIt:
    cv.imcount( $filename[, $flags] ) -> retval

cv::Mat cv::imdecode( cv::Mat buf
                      int     flags )

AutoIt:
    cv.imdecode( $buf, $flags ) -> retval

bool cv::imencode( string             ext
                   cv::Mat            img
                   std::vector<uchar> buf
                   std::vector<int>   params = std::vector<int>() )

AutoIt:
    cv.imencode( $ext, $img[, $params[, $buf]] ) -> retval, buf

cv::Mat cv::imread( string filename
                    int    flags = IMREAD_COLOR )

AutoIt:
    cv.imread( $filename[, $flags] ) -> retval

bool cv::imreadmulti( string               filename
                      std::vector<cv::Mat> mats
                      int                  flags = IMREAD_ANYCOLOR )

AutoIt:
    cv.imreadmulti( $filename[, $flags[, $mats]] ) -> retval, mats

bool cv::imreadmulti( string               filename
                      std::vector<cv::Mat> mats
                      int                  start
                      int                  count
                      int                  flags = IMREAD_ANYCOLOR )

AutoIt:
    cv.imreadmulti( $filename, $start, $count[, $flags[, $mats]] ) -> retval, mats

bool cv::imwrite( string           filename
                  cv::Mat          img
                  std::vector<int> params = std::vector<int>() )

AutoIt:
    cv.imwrite( $filename, $img[, $params] ) -> retval

bool cv::imwritemulti( string               filename
                       std::vector<cv::Mat> img
                       std::vector<int>     params = std::vector<int>() )

AutoIt:
    cv.imwritemulti( $filename, $img[, $params] ) -> retval

cv::Mat cv::Mat::create()

AutoIt:
    cv.Mat.create() -> <cv.Mat object>

cv::Mat cv::Mat::create( int rows
                         int cols
                         int type )

AutoIt:
    cv.Mat.create( $rows, $cols, $type ) -> <cv.Mat object>

cv::Mat cv::Mat::create( std::tuple<int, int> size
                         int                  type )

AutoIt:
    cv.Mat.create( $size, $type ) -> <cv.Mat object>

cv::Mat cv::Mat::create( int                                        rows
                         int                                        cols
                         int                                        type
                         std::tuple<double, double, double, double> s )

AutoIt:
    cv.Mat.create( $rows, $cols, $type, $s ) -> <cv.Mat object>

cv::Mat cv::Mat::create( std::tuple<int, int>                       size
                         int                                        type
                         std::tuple<double, double, double, double> s )

AutoIt:
    cv.Mat.create( $size, $type, $s ) -> <cv.Mat object>

cv::Mat cv::Mat::create( int    rows
                         int    cols
                         int    type
                         void*  data
                         size_t step = cv::Mat::AUTO_STEP )

AutoIt:
    cv.Mat.create( $rows, $cols, $type, $data[, $step] ) -> <cv.Mat object>

cv::Mat cv::Mat::create( cv::Mat m )

AutoIt:
    cv.Mat.create( $m ) -> <cv.Mat object>

cv::Mat cv::Mat::create( cv::Mat                        src
                         std::tuple<int, int, int, int> roi )

AutoIt:
    cv.Mat.create( $src, $roi ) -> <cv.Mat object>

bool cv::Mat::isContinuous()

AutoIt:
    cv.Mat.isContinuous() -> retval

bool cv::Mat::isSubmatrix()

AutoIt:
    cv.Mat.isSubmatrix() -> retval

size_t cv::Mat::elemSize()

AutoIt:
    cv.Mat.elemSize() -> retval

size_t cv::Mat::elemSize1()

AutoIt:
    cv.Mat.elemSize1() -> retval

int cv::Mat::type()

AutoIt:
    cv.Mat.type() -> retval

int cv::Mat::depth()

AutoIt:
    cv.Mat.depth() -> retval

int cv::Mat::channels()

AutoIt:
    cv.Mat.channels() -> retval

size_t cv::Mat::step1( int i = 0 )

AutoIt:
    cv.Mat.step1( [$i] ) -> retval

bool cv::Mat::empty()

AutoIt:
    cv.Mat.empty() -> retval

size_t cv::Mat::total()

AutoIt:
    cv.Mat.total() -> retval

size_t cv::Mat::total( int startDim
                       int endDim = INT_MAX )

AutoIt:
    cv.Mat.total( $startDim[, $endDim] ) -> retval

int cv::Mat::checkVector( int elemChannels
                          int depth = -1
                          int requireContinuous = true )

AutoIt:
    cv.Mat.checkVector( $elemChannels[, $depth[, $requireContinuous]] ) -> retval

uchar* cv::Mat::ptr( int y = 0 )

AutoIt:
    cv.Mat.ptr( [$y] ) -> retval

uchar* cv::Mat::ptr( int i0
                     int i1 )

AutoIt:
    cv.Mat.ptr( $i0, $i1 ) -> retval

uchar* cv::Mat::ptr( int i0
                     int i1
                     int i2 )

AutoIt:
    cv.Mat.ptr( $i0, $i1, $i2 ) -> retval

void cv::Mat::pop_back( size_t value )

AutoIt:
    cv.Mat.pop_back( $value ) -> None

void cv::Mat::push_back( cv::Mat value )

AutoIt:
    cv.Mat.push_back( $value ) -> None

cv::Mat cv::Mat::reshape( int cn
                          int rows = 0 )

AutoIt:
    cv.Mat.reshape( $cn[, $rows] ) -> retval

cv::Mat cv::Mat::eye( int rows
                      int cols
                      int type )

AutoIt:
    cv.Mat.eye( $rows, $cols, $type ) -> retval

cv::Mat cv::Mat::zeros( int rows
                        int cols
                        int type )

AutoIt:
    cv.Mat.zeros( $rows, $cols, $type ) -> retval

cv::Mat cv::Mat::zeros( std::tuple<int, int> size
                        int                  type )

AutoIt:
    cv.Mat.zeros( $size, $type ) -> retval

cv::Mat cv::Mat::ones( int rows
                       int cols
                       int type )

AutoIt:
    cv.Mat.ones( $rows, $cols, $type ) -> retval

cv::Mat cv::Mat::ones( std::tuple<int, int> size
                       int                  type )

AutoIt:
    cv.Mat.ones( $size, $type ) -> retval

void dlib::image_dataset_metadata::save_image_dataset_metadata( dlib::image_dataset_metadata::dataset data
                                                                string                                filename )

AutoIt:
    dlib.image_dataset_metadata.save_image_dataset_metadata( $data, $filename ) -> None

void dlib::image_dataset_metadata::load_image_dataset_metadata( dlib::image_dataset_metadata::dataset& data
                                                                string                                 filename )

AutoIt:
    dlib.image_dataset_metadata.load_image_dataset_metadata( $filename[, $data] ) -> data

dlib::image_dataset_metadata::dataset dlib::image_dataset_metadata::make_bounding_box_regression_training_data( dlib::image_dataset_metadata::dataset&    truth
                                                                                                                std::vector<std::vector<dlib::rectangle>> detections )

AutoIt:
    dlib.image_dataset_metadata.make_bounding_box_regression_training_data( $truth, $detections ) -> retval

dlib::image_dataset_metadata::box dlib::image_dataset_metadata::box::create()

AutoIt:
    dlib.image_dataset_metadata.box.create() -> <dlib.image_dataset_metadata.box object>

dlib::image_dataset_metadata::box dlib::image_dataset_metadata::box::create()

AutoIt:
    dlib.image_dataset_metadata.box.create() -> <dlib.image_dataset_metadata.box object>

dlib::image_dataset_metadata::box dlib::image_dataset_metadata::box::create( dlib::rectangle rect )

AutoIt:
    dlib.image_dataset_metadata.box.create( $rect ) -> <dlib.image_dataset_metadata.box object>

bool dlib::image_dataset_metadata::box::has_label()

AutoIt:
    dlib.image_dataset_metadata.box.has_label() -> retval

dlib::image_dataset_metadata::image dlib::image_dataset_metadata::image::create()

AutoIt:
    dlib.image_dataset_metadata.image.create() -> <dlib.image_dataset_metadata.image object>

dlib::image_dataset_metadata::image dlib::image_dataset_metadata::image::create()

AutoIt:
    dlib.image_dataset_metadata.image.create() -> <dlib.image_dataset_metadata.image object>

dlib::image_dataset_metadata::image dlib::image_dataset_metadata::image::create( string filename )

AutoIt:
    dlib.image_dataset_metadata.image.create( $filename ) -> <dlib.image_dataset_metadata.image object>

dlib::image_dataset_metadata::dataset dlib::image_dataset_metadata::dataset::create()

AutoIt:
    dlib.image_dataset_metadata.dataset.create() -> <dlib.image_dataset_metadata.dataset object>

dlib::image_dataset_metadata::dataset dlib::image_dataset_metadata::dataset::create()

AutoIt:
    dlib.image_dataset_metadata.dataset.create() -> <dlib.image_dataset_metadata.dataset object>

dlib::line dlib::line::create()

AutoIt:
    dlib.line.create() -> <dlib.line object>

dlib::line dlib::line::create( dlib::dpoint a
                               dlib::dpoint b )

AutoIt:
    dlib.line.create( $a, $b ) -> <dlib.line object>

dlib::line dlib::line::create( dlib::point a
                               dlib::point b )

AutoIt:
    dlib.line.create( $a, $b ) -> <dlib.line object>

dlib::Matrix dlib::Matrix::create()

AutoIt:
    dlib.matrix.create() -> <dlib.Matrix object>

std::shared_ptr<dlib::Matrix> dlib::Matrix::create( std::vector<double> list )

AutoIt:
    dlib.matrix.create( $list ) -> retval

std::shared_ptr<dlib::Matrix> dlib::Matrix::create( std::vector<std::vector<double>> list )

AutoIt:
    dlib.matrix.create( $list ) -> retval

std::shared_ptr<dlib::Matrix> dlib::Matrix::create( long rows
                                                    long cols )

AutoIt:
    dlib.matrix.create( $rows, $cols ) -> retval

void dlib::Matrix::set_size( long rows
                             long cols )

AutoIt:
    dlib.matrix.set_size( $rows, $cols ) -> None

long dlib::Matrix::nr()

AutoIt:
    dlib.matrix.nr() -> retval

long dlib::Matrix::nc()

AutoIt:
    dlib.matrix.nc() -> retval

void dlib::Matrix::serialize( string file )

AutoIt:
    dlib.matrix.serialize( $file ) -> None

void dlib::Matrix::deserialize( string file )

AutoIt:
    dlib.matrix.deserialize( $file ) -> None

dlib::_row dlib::Matrix::get( long row )

AutoIt:
    dlib.matrix.get( $row ) -> retval

string dlib::Matrix::ToString()

AutoIt:
    dlib.matrix.ToString() -> retval

dlib::fhog_object_detector dlib::fhog_object_detector::create()

AutoIt:
    dlib.fhog_object_detector.create() -> <dlib.fhog_object_detector object>

std::shared_ptr<dlib::fhog_object_detector> dlib::fhog_object_detector::create( string filename )

AutoIt:
    dlib.fhog_object_detector.create( $filename ) -> retval

void dlib::fhog_object_detector::run( cv::Mat                      image
                                      std::vector<dlib::rectangle> rectangles
                                      std::vector<double>          detection_confidences
                                      std::vector<ULONG>           weight_indices
                                      uint                         upsample_num_times = 0
                                      double                       adjust_threshold = 0.0 )

AutoIt:
    dlib.fhog_object_detector.run( $image[, $upsample_num_times[, $adjust_threshold[, $rectangles[, $detection_confidences[, $weight_indices]]]]] ) -> rectangles, detection_confidences, weight_indices

void dlib::fhog_object_detector::get_call( cv::Mat                      image
                                           std::vector<dlib::rectangle> rectangles
                                           std::vector<double>          detection_confidences
                                           std::vector<ULONG>           weight_indices
                                           uint                         upsample_num_times = 0
                                           double                       adjust_threshold = 0.0 )

AutoIt:
    dlib.fhog_object_detector.call( $image[, $upsample_num_times[, $adjust_threshold[, $rectangles[, $detection_confidences[, $weight_indices]]]]] ) -> rectangles, detection_confidences, weight_indices
    dlib.fhog_object_detector( $image[, $upsample_num_times[, $adjust_threshold[, $rectangles[, $detection_confidences[, $weight_indices]]]]] ) -> rectangles, detection_confidences, weight_indices

void dlib::fhog_object_detector::save( string detector_output_filename )

AutoIt:
    dlib.fhog_object_detector.save( $detector_output_filename ) -> None

void dlib::fhog_object_detector::run_multiple( std::vector<dlib::fhog_object_detector> vectors
                                               cv::Mat                                 image
                                               std::vector<dlib::rectangle>            rectangles
                                               std::vector<double>                     detection_confidences
                                               std::vector<ULONG>                      weight_indices
                                               uint                                    upsample_num_times = 0
                                               double                                  adjust_threshold = 0.0 )

AutoIt:
    dlib.fhog_object_detector.run_multiple( $vectors, $image[, $upsample_num_times[, $adjust_threshold[, $rectangles[, $detection_confidences[, $weight_indices]]]]] ) -> rectangles, detection_confidences, weight_indices

void dlib::fhog_object_detector::run_multiple( std::vector<dlib::simple_object_detector_com> vectors
                                               cv::Mat                                       image
                                               std::vector<dlib::rectangle>                  rectangles
                                               std::vector<double>                           detection_confidences
                                               std::vector<ULONG>                            weight_indices
                                               uint                                          upsample_num_times = 0
                                               double                                        adjust_threshold = 0.0 )

AutoIt:
    dlib.fhog_object_detector.run_multiple( $vectors, $image[, $upsample_num_times[, $adjust_threshold[, $rectangles[, $detection_confidences[, $weight_indices]]]]] ) -> rectangles, detection_confidences, weight_indices

dlib::rect_filter dlib::rect_filter::create()

AutoIt:
    dlib.rect_filter.create() -> <dlib.rect_filter object>

dlib::rect_filter dlib::rect_filter::create( double measurement_noise
                                             double typical_acceleration
                                             double max_measurement_deviation )

AutoIt:
    dlib.rect_filter.create( $measurement_noise, $typical_acceleration, $max_measurement_deviation ) -> <dlib.rect_filter object>

double dlib::rect_filter::measurement_noise()

AutoIt:
    dlib.rect_filter.measurement_noise() -> retval

double dlib::rect_filter::typical_acceleration()

AutoIt:
    dlib.rect_filter.typical_acceleration() -> retval

double dlib::rect_filter::max_measurement_deviation()

AutoIt:
    dlib.rect_filter.max_measurement_deviation() -> retval

dlib::drectangle dlib::rect_filter::get_call( dlib::rectangle rect )

AutoIt:
    dlib.rect_filter.call( $rect ) -> retval
    dlib.rect_filter( $rect ) -> retval

dlib::drectangle dlib::rect_filter::get_call( dlib::drectangle rect )

AutoIt:
    dlib.rect_filter.call( $rect ) -> retval
    dlib.rect_filter( $rect ) -> retval

dlib::rectangle dlib::rectangle::create()

AutoIt:
    dlib.rectangle.create() -> <dlib.rectangle object>

dlib::rectangle dlib::rectangle::create( long& left
                                         long& top
                                         long& right
                                         long& bottom )

AutoIt:
    dlib.rectangle.create( $left, $top, $right, $bottom ) -> <dlib.rectangle object>

dlib::rectangle dlib::rectangle::create( dlib::drectangle& rect )

AutoIt:
    dlib.rectangle.create( $rect ) -> <dlib.rectangle object>

dlib::rectangle dlib::rectangle::create( dlib::rectangle& rect )

AutoIt:
    dlib.rectangle.create( $rect ) -> <dlib.rectangle object>

ULONG dlib::rectangle::area()

AutoIt:
    dlib.rectangle.area() -> retval

long dlib::rectangle::left()

AutoIt:
    dlib.rectangle.left() -> retval

long dlib::rectangle::top()

AutoIt:
    dlib.rectangle.top() -> retval

long dlib::rectangle::right()

AutoIt:
    dlib.rectangle.right() -> retval

long dlib::rectangle::bottom()

AutoIt:
    dlib.rectangle.bottom() -> retval

ULONG dlib::rectangle::width()

AutoIt:
    dlib.rectangle.width() -> retval

ULONG dlib::rectangle::height()

AutoIt:
    dlib.rectangle.height() -> retval

dlib::point dlib::rectangle::tl_corner()

AutoIt:
    dlib.rectangle.tl_corner() -> retval

dlib::point dlib::rectangle::tr_corner()

AutoIt:
    dlib.rectangle.tr_corner() -> retval

dlib::point dlib::rectangle::bl_corner()

AutoIt:
    dlib.rectangle.bl_corner() -> retval

dlib::point dlib::rectangle::br_corner()

AutoIt:
    dlib.rectangle.br_corner() -> retval

bool dlib::rectangle::is_empty()

AutoIt:
    dlib.rectangle.is_empty() -> retval

dlib::point dlib::rectangle::center()

AutoIt:
    dlib.rectangle.center() -> retval

dlib::dpoint dlib::rectangle::dcenter()

AutoIt:
    dlib.rectangle.dcenter() -> retval

bool dlib::rectangle::contains( dlib::dpoint& point )

AutoIt:
    dlib.rectangle.contains( $point ) -> retval

bool dlib::rectangle::contains( dlib::point& point )

AutoIt:
    dlib.rectangle.contains( $point ) -> retval

bool dlib::rectangle::contains( long& x
                                long& y )

AutoIt:
    dlib.rectangle.contains( $x, $y ) -> retval

bool dlib::rectangle::contains( dlib::rectangle& rect )

AutoIt:
    dlib.rectangle.contains( $rect ) -> retval

dlib::rectangle dlib::rectangle::intersect( dlib::rectangle& rect )

AutoIt:
    dlib.rectangle.intersect( $rect ) -> retval

string dlib::rectangle::ToString()

AutoIt:
    dlib.rectangle.ToString() -> retval

dlib::drectangle dlib::drectangle::create()

AutoIt:
    dlib.drectangle.create() -> <dlib.drectangle object>

dlib::drectangle dlib::drectangle::create( double& left
                                           double& top
                                           double& right
                                           double& bottom )

AutoIt:
    dlib.drectangle.create( $left, $top, $right, $bottom ) -> <dlib.drectangle object>

dlib::drectangle dlib::drectangle::create( dlib::drectangle& rect )

AutoIt:
    dlib.drectangle.create( $rect ) -> <dlib.drectangle object>

dlib::drectangle dlib::drectangle::create( dlib::rectangle& rect )

AutoIt:
    dlib.drectangle.create( $rect ) -> <dlib.drectangle object>

double dlib::drectangle::area()

AutoIt:
    dlib.drectangle.area() -> retval

double dlib::drectangle::left()

AutoIt:
    dlib.drectangle.left() -> retval

double dlib::drectangle::top()

AutoIt:
    dlib.drectangle.top() -> retval

double dlib::drectangle::right()

AutoIt:
    dlib.drectangle.right() -> retval

double dlib::drectangle::bottom()

AutoIt:
    dlib.drectangle.bottom() -> retval

double dlib::drectangle::width()

AutoIt:
    dlib.drectangle.width() -> retval

double dlib::drectangle::height()

AutoIt:
    dlib.drectangle.height() -> retval

dlib::dpoint dlib::drectangle::tl_corner()

AutoIt:
    dlib.drectangle.tl_corner() -> retval

dlib::dpoint dlib::drectangle::tr_corner()

AutoIt:
    dlib.drectangle.tr_corner() -> retval

dlib::dpoint dlib::drectangle::bl_corner()

AutoIt:
    dlib.drectangle.bl_corner() -> retval

dlib::dpoint dlib::drectangle::br_corner()

AutoIt:
    dlib.drectangle.br_corner() -> retval

bool dlib::drectangle::is_empty()

AutoIt:
    dlib.drectangle.is_empty() -> retval

dlib::dpoint dlib::drectangle::center()

AutoIt:
    dlib.drectangle.center() -> retval

dlib::dpoint dlib::drectangle::dcenter()

AutoIt:
    dlib.drectangle.dcenter() -> retval

bool dlib::drectangle::contains( dlib::dpoint& point )

AutoIt:
    dlib.drectangle.contains( $point ) -> retval

bool dlib::drectangle::contains( dlib::point& point )

AutoIt:
    dlib.drectangle.contains( $point ) -> retval

bool dlib::drectangle::contains( long& x
                                 long& y )

AutoIt:
    dlib.drectangle.contains( $x, $y ) -> retval

bool dlib::drectangle::contains( dlib::drectangle& rect )

AutoIt:
    dlib.drectangle.contains( $rect ) -> retval

dlib::drectangle dlib::drectangle::intersect( dlib::drectangle& rect )

AutoIt:
    dlib.drectangle.intersect( $rect ) -> retval

string dlib::drectangle::ToString()

AutoIt:
    dlib.drectangle.ToString() -> retval

dlib::full_object_detection dlib::full_object_detection::create()

AutoIt:
    dlib.full_object_detection.create() -> <dlib.full_object_detection object>

dlib::full_object_detection dlib::full_object_detection::create( dlib::rectangle          rect
                                                                 std::vector<dlib::point> parts )

AutoIt:
    dlib.full_object_detection.create( $rect, $parts ) -> <dlib.full_object_detection object>

dlib::point dlib::full_object_detection::part( ULONG idx )

AutoIt:
    dlib.full_object_detection.part( $idx ) -> retval

std::vector<dlib::point> dlib::full_object_detection::parts()

AutoIt:
    dlib.full_object_detection.parts() -> retval

dlib::shape_predictor dlib::shape_predictor::create()

AutoIt:
    dlib.shape_predictor.create() -> <dlib.shape_predictor object>

std::shared_ptr<dlib::shape_predictor> dlib::shape_predictor::create( string filename )

AutoIt:
    dlib.shape_predictor.create( $filename ) -> retval

dlib::full_object_detection dlib::shape_predictor::get_call( cv::Mat         img
                                                             dlib::rectangle box )

AutoIt:
    dlib.shape_predictor.call( $img, $box ) -> retval
    dlib.shape_predictor( $img, $box ) -> retval

void dlib::shape_predictor::save( string detector_output_filename )

AutoIt:
    dlib.shape_predictor.save( $detector_output_filename ) -> None

dlib::svm_c_trainer_radial_basis dlib::svm_c_trainer_radial_basis::create()

AutoIt:
    dlib.svm_c_trainer_radial_basis.create() -> <dlib.svm_c_trainer_radial_basis object>

dlib::_decision_function_radial_basis dlib::svm_c_trainer_radial_basis::train( std::vector<dlib::SpaceVector> samples
                                                                               std::vector<double>            labels )

AutoIt:
    dlib.svm_c_trainer_radial_basis.train( $samples, $labels ) -> retval

void dlib::svm_c_trainer_radial_basis::set_c( double c )

AutoIt:
    dlib.svm_c_trainer_radial_basis.set_c( $c ) -> None

dlib::svm_c_trainer_sparse_radial_basis dlib::svm_c_trainer_sparse_radial_basis::create()

AutoIt:
    dlib.svm_c_trainer_sparse_radial_basis.create() -> <dlib.svm_c_trainer_sparse_radial_basis object>

dlib::_decision_function_sparse_radial_basis dlib::svm_c_trainer_sparse_radial_basis::train( std::vector<std::vector<std::pair<ULONG, double>>> samples
                                                                                             std::vector<double>                                labels )

AutoIt:
    dlib.svm_c_trainer_sparse_radial_basis.train( $samples, $labels ) -> retval

void dlib::svm_c_trainer_sparse_radial_basis::set_c( double c )

AutoIt:
    dlib.svm_c_trainer_sparse_radial_basis.set_c( $c ) -> None

dlib::svm_c_trainer_histogram_intersection dlib::svm_c_trainer_histogram_intersection::create()

AutoIt:
    dlib.svm_c_trainer_histogram_intersection.create() -> <dlib.svm_c_trainer_histogram_intersection object>

dlib::_decision_function_histogram_intersection dlib::svm_c_trainer_histogram_intersection::train( std::vector<dlib::SpaceVector> samples
                                                                                                   std::vector<double>            labels )

AutoIt:
    dlib.svm_c_trainer_histogram_intersection.train( $samples, $labels ) -> retval

void dlib::svm_c_trainer_histogram_intersection::set_c( double c )

AutoIt:
    dlib.svm_c_trainer_histogram_intersection.set_c( $c ) -> None

dlib::svm_c_trainer_sparse_histogram_intersection dlib::svm_c_trainer_sparse_histogram_intersection::create()

AutoIt:
    dlib.svm_c_trainer_sparse_histogram_intersection.create() -> <dlib.svm_c_trainer_sparse_histogram_intersection object>

dlib::_decision_function_sparse_histogram_intersection dlib::svm_c_trainer_sparse_histogram_intersection::train( std::vector<std::vector<std::pair<ULONG, double>>> samples
                                                                                                                 std::vector<double>                                labels )

AutoIt:
    dlib.svm_c_trainer_sparse_histogram_intersection.train( $samples, $labels ) -> retval

void dlib::svm_c_trainer_sparse_histogram_intersection::set_c( double c )

AutoIt:
    dlib.svm_c_trainer_sparse_histogram_intersection.set_c( $c ) -> None

dlib::svm_c_trainer_linear dlib::svm_c_trainer_linear::create()

AutoIt:
    dlib.svm_c_trainer_linear.create() -> <dlib.svm_c_trainer_linear object>

dlib::_decision_function_linear dlib::svm_c_trainer_linear::train( std::vector<dlib::SpaceVector> samples
                                                                   std::vector<double>            labels )

AutoIt:
    dlib.svm_c_trainer_linear.train( $samples, $labels ) -> retval

void dlib::svm_c_trainer_linear::set_c( double c )

AutoIt:
    dlib.svm_c_trainer_linear.set_c( $c ) -> None

void dlib::svm_c_trainer_linear::set_prior( dlib::_decision_function_linear prior_ )

AutoIt:
    dlib.svm_c_trainer_linear.set_prior( $prior_ ) -> None

void dlib::svm_c_trainer_linear::be_verbose()

AutoIt:
    dlib.svm_c_trainer_linear.be_verbose() -> None

void dlib::svm_c_trainer_linear::be_quiet()

AutoIt:
    dlib.svm_c_trainer_linear.be_quiet() -> None

dlib::svm_c_trainer_sparse_linear dlib::svm_c_trainer_sparse_linear::create()

AutoIt:
    dlib.svm_c_trainer_sparse_linear.create() -> <dlib.svm_c_trainer_sparse_linear object>

dlib::_decision_function_sparse_linear dlib::svm_c_trainer_sparse_linear::train( std::vector<std::vector<std::pair<ULONG, double>>> samples
                                                                                 std::vector<double>                                labels )

AutoIt:
    dlib.svm_c_trainer_sparse_linear.train( $samples, $labels ) -> retval

void dlib::svm_c_trainer_sparse_linear::set_c( double c )

AutoIt:
    dlib.svm_c_trainer_sparse_linear.set_c( $c ) -> None

void dlib::svm_c_trainer_sparse_linear::set_prior( dlib::_decision_function_sparse_linear prior_ )

AutoIt:
    dlib.svm_c_trainer_sparse_linear.set_prior( $prior_ ) -> None

void dlib::svm_c_trainer_sparse_linear::be_verbose()

AutoIt:
    dlib.svm_c_trainer_sparse_linear.be_verbose() -> None

void dlib::svm_c_trainer_sparse_linear::be_quiet()

AutoIt:
    dlib.svm_c_trainer_sparse_linear.be_quiet() -> None

dlib::rvm_trainer_radial_basis dlib::rvm_trainer_radial_basis::create()

AutoIt:
    dlib.rvm_trainer_radial_basis.create() -> <dlib.rvm_trainer_radial_basis object>

dlib::_decision_function_radial_basis dlib::rvm_trainer_radial_basis::train( std::vector<dlib::SpaceVector> samples
                                                                             std::vector<double>            labels )

AutoIt:
    dlib.rvm_trainer_radial_basis.train( $samples, $labels ) -> retval

dlib::rvm_trainer_sparse_radial_basis dlib::rvm_trainer_sparse_radial_basis::create()

AutoIt:
    dlib.rvm_trainer_sparse_radial_basis.create() -> <dlib.rvm_trainer_sparse_radial_basis object>

dlib::_decision_function_sparse_radial_basis dlib::rvm_trainer_sparse_radial_basis::train( std::vector<std::vector<std::pair<ULONG, double>>> samples
                                                                                           std::vector<double>                                labels )

AutoIt:
    dlib.rvm_trainer_sparse_radial_basis.train( $samples, $labels ) -> retval

dlib::rvm_trainer_histogram_intersection dlib::rvm_trainer_histogram_intersection::create()

AutoIt:
    dlib.rvm_trainer_histogram_intersection.create() -> <dlib.rvm_trainer_histogram_intersection object>

dlib::_decision_function_histogram_intersection dlib::rvm_trainer_histogram_intersection::train( std::vector<dlib::SpaceVector> samples
                                                                                                 std::vector<double>            labels )

AutoIt:
    dlib.rvm_trainer_histogram_intersection.train( $samples, $labels ) -> retval

dlib::rvm_trainer_sparse_histogram_intersection dlib::rvm_trainer_sparse_histogram_intersection::create()

AutoIt:
    dlib.rvm_trainer_sparse_histogram_intersection.create() -> <dlib.rvm_trainer_sparse_histogram_intersection object>

dlib::_decision_function_sparse_histogram_intersection dlib::rvm_trainer_sparse_histogram_intersection::train( std::vector<std::vector<std::pair<ULONG, double>>> samples
                                                                                                               std::vector<double>                                labels )

AutoIt:
    dlib.rvm_trainer_sparse_histogram_intersection.train( $samples, $labels ) -> retval

dlib::rvm_trainer_linear dlib::rvm_trainer_linear::create()

AutoIt:
    dlib.rvm_trainer_linear.create() -> <dlib.rvm_trainer_linear object>

dlib::_decision_function_linear dlib::rvm_trainer_linear::train( std::vector<dlib::SpaceVector> samples
                                                                 std::vector<double>            labels )

AutoIt:
    dlib.rvm_trainer_linear.train( $samples, $labels ) -> retval

dlib::rvm_trainer_sparse_linear dlib::rvm_trainer_sparse_linear::create()

AutoIt:
    dlib.rvm_trainer_sparse_linear.create() -> <dlib.rvm_trainer_sparse_linear object>

dlib::_decision_function_sparse_linear dlib::rvm_trainer_sparse_linear::train( std::vector<std::vector<std::pair<ULONG, double>>> samples
                                                                               std::vector<double>                                labels )

AutoIt:
    dlib.rvm_trainer_sparse_linear.train( $samples, $labels ) -> retval

dlib::vec_ranking_pair dlib::vec_ranking_pair::create()

AutoIt:
    dlib.ranking_pair.create() -> <dlib.vec_ranking_pair object>

dlib::vec_ranking_pair dlib::vec_ranking_pair::create()

AutoIt:
    dlib.ranking_pair.create() -> <dlib.vec_ranking_pair object>

dlib::vec_ranking_pair dlib::vec_ranking_pair::create( std::vector<dlib::SpaceVector> relevant
                                                       std::vector<dlib::SpaceVector> nonrelevant )

AutoIt:
    dlib.ranking_pair.create( $relevant, $nonrelevant ) -> <dlib.vec_ranking_pair object>

dlib::sparse_ranking_pair dlib::sparse_ranking_pair::create()

AutoIt:
    dlib.sparse_ranking_pair.create() -> <dlib.sparse_ranking_pair object>

dlib::sparse_ranking_pair dlib::sparse_ranking_pair::create()

AutoIt:
    dlib.sparse_ranking_pair.create() -> <dlib.sparse_ranking_pair object>

dlib::sparse_ranking_pair dlib::sparse_ranking_pair::create( std::vector<std::vector<std::pair<ULONG, double>>> relevant
                                                             std::vector<std::vector<std::pair<ULONG, double>>> nonrelevant )

AutoIt:
    dlib.sparse_ranking_pair.create( $relevant, $nonrelevant ) -> <dlib.sparse_ranking_pair object>

dlib::vec_svm_rank_trainer dlib::vec_svm_rank_trainer::create()

AutoIt:
    dlib.svm_rank_trainer.create() -> <dlib.vec_svm_rank_trainer object>

dlib::_decision_function_linear dlib::vec_svm_rank_trainer::train( dlib::vec_ranking_pair sample )

AutoIt:
    dlib.svm_rank_trainer.train( $sample ) -> retval

dlib::_decision_function_linear dlib::vec_svm_rank_trainer::train( std::vector<dlib::vec_ranking_pair> samples )

AutoIt:
    dlib.svm_rank_trainer.train( $samples ) -> retval

void dlib::vec_svm_rank_trainer::set_prior( dlib::_decision_function_linear prior_ )

AutoIt:
    dlib.svm_rank_trainer.set_prior( $prior_ ) -> None

void dlib::vec_svm_rank_trainer::be_verbose()

AutoIt:
    dlib.svm_rank_trainer.be_verbose() -> None

void dlib::vec_svm_rank_trainer::be_quiet()

AutoIt:
    dlib.svm_rank_trainer.be_quiet() -> None

dlib::svm_rank_trainer_sparse dlib::svm_rank_trainer_sparse::create()

AutoIt:
    dlib.svm_rank_trainer_sparse.create() -> <dlib.svm_rank_trainer_sparse object>

dlib::_decision_function_sparse_linear dlib::svm_rank_trainer_sparse::train( dlib::sparse_ranking_pair sample )

AutoIt:
    dlib.svm_rank_trainer_sparse.train( $sample ) -> retval

dlib::_decision_function_sparse_linear dlib::svm_rank_trainer_sparse::train( std::vector<dlib::sparse_ranking_pair> samples )

AutoIt:
    dlib.svm_rank_trainer_sparse.train( $samples ) -> retval

void dlib::svm_rank_trainer_sparse::set_prior( dlib::_decision_function_sparse_linear prior_ )

AutoIt:
    dlib.svm_rank_trainer_sparse.set_prior( $prior_ ) -> None

void dlib::svm_rank_trainer_sparse::be_verbose()

AutoIt:
    dlib.svm_rank_trainer_sparse.be_verbose() -> None

void dlib::svm_rank_trainer_sparse::be_quiet()

AutoIt:
    dlib.svm_rank_trainer_sparse.be_quiet() -> None

dlib::SpaceVector dlib::SpaceVector::create()

AutoIt:
    dlib.vector.create() -> <dlib.SpaceVector object>

std::shared_ptr<dlib::SpaceVector> dlib::SpaceVector::create( std::vector<double> list )

AutoIt:
    dlib.vector.create( $list ) -> retval

std::shared_ptr<dlib::SpaceVector> dlib::SpaceVector::create( long rows )

AutoIt:
    dlib.vector.create( $rows ) -> retval

void dlib::SpaceVector::set_size( long rows )

AutoIt:
    dlib.vector.set_size( $rows ) -> None

void dlib::SpaceVector::resize( long rows )

AutoIt:
    dlib.vector.resize( $rows ) -> None

long dlib::SpaceVector::size()

AutoIt:
    dlib.vector.size() -> retval

void dlib::SpaceVector::set( long   row
                             double val )

AutoIt:
    dlib.vector.set( $row, $val ) -> None

double dlib::SpaceVector::get( long row )

AutoIt:
    dlib.vector.get( $row ) -> retval

dlib::SpaceVector dlib::SpaceVector::slice( long start
                                            long stop = this->__self->get()->size()
                                            long step = 1 )

AutoIt:
    dlib.vector.slice( $start[, $stop[, $step]] ) -> retval

string dlib::SpaceVector::ToString()

AutoIt:
    dlib.vector.ToString() -> retval

dlib::point_transform_projective dlib::point_transform_projective::create()

AutoIt:
    dlib.point_transform_projective.create() -> <dlib.point_transform_projective object>

std::shared_ptr<dlib::point_transform_projective> dlib::point_transform_projective::create( dlib::Matrix m )

AutoIt:
    dlib.point_transform_projective.create( $m ) -> retval

std::shared_ptr<dlib::point_transform_projective> dlib::point_transform_projective::create( cv::Mat m )

AutoIt:
    dlib.point_transform_projective.create( $m ) -> retval

dlib::dpoint dlib::dpoint::create( double& x = 0
                                   double& y = 0 )

AutoIt:
    dlib.dpoint.create( [$x[, $y]] ) -> <dlib.dpoint object>

dlib::dpoint dlib::dpoint::create( dlib::point& p )

AutoIt:
    dlib.dpoint.create( $p ) -> <dlib.dpoint object>

dlib::dpoint dlib::dpoint::normalize()

AutoIt:
    dlib.dpoint.normalize() -> retval

dlib::dpoint dlib::dpoint::add( dlib::dpoint& other )

AutoIt:
    dlib.dpoint.add( $other ) -> retval

dlib::dpoint dlib::dpoint::sub( dlib::dpoint& other )

AutoIt:
    dlib.dpoint.sub( $other ) -> retval

dlib::dpoint dlib::dpoint::divide( double& scalar )

AutoIt:
    dlib.dpoint.divide( $scalar ) -> retval

dlib::dpoint dlib::dpoint::multiply( double& scalar )

AutoIt:
    dlib.dpoint.multiply( $scalar ) -> retval

string dlib::dpoint::ToString()

AutoIt:
    dlib.dpoint.ToString() -> retval

dlib::point dlib::point::create( long& x = 0
                                 long& y = 0 )

AutoIt:
    dlib.point.create( [$x[, $y]] ) -> <dlib.point object>

dlib::point dlib::point::create( dlib::dpoint& p )

AutoIt:
    dlib.point.create( $p ) -> <dlib.point object>

dlib::point dlib::point::normalize()

AutoIt:
    dlib.point.normalize() -> retval

dlib::point dlib::point::add( dlib::point& other )

AutoIt:
    dlib.point.add( $other ) -> retval

dlib::point dlib::point::sub( dlib::point& other )

AutoIt:
    dlib.point.sub( $other ) -> retval

dlib::point dlib::point::divide( double& scalar )

AutoIt:
    dlib.point.divide( $scalar ) -> retval

dlib::point dlib::point::multiply( double& scalar )

AutoIt:
    dlib.point.multiply( $scalar ) -> retval

string dlib::point::ToString()

AutoIt:
    dlib.point.ToString() -> retval

VectorOfVariant VectorOfVariant::create()

AutoIt:
    VectorOfVariant.create() -> <VectorOfVariant object>

VectorOfVariant VectorOfVariant::create( size_t size )

AutoIt:
    VectorOfVariant.create( $size ) -> <VectorOfVariant object>

VectorOfVariant VectorOfVariant::create( VectorOfVariant other )

AutoIt:
    VectorOfVariant.create( $other ) -> <VectorOfVariant object>

std::vector<int> VectorOfVariant::Keys()

AutoIt:
    VectorOfVariant.Keys() -> retval

VectorOfVariant VectorOfVariant::Items()

AutoIt:
    VectorOfVariant.Items() -> retval

void VectorOfVariant::push_back( _variant_t value )

AutoIt:
    VectorOfVariant.push_back( $value ) -> None

void VectorOfVariant::Add( _variant_t value )

AutoIt:
    VectorOfVariant.Add( $value ) -> None

void VectorOfVariant::Remove( size_t index )

AutoIt:
    VectorOfVariant.Remove( $index ) -> None

_variant_t VectorOfVariant::at( size_t index )

AutoIt:
    VectorOfVariant.at( $index ) -> retval

void VectorOfVariant::at( size_t     index
                          _variant_t value )

AutoIt:
    VectorOfVariant.at( $index, $value ) -> None

size_t VectorOfVariant::size()

AutoIt:
    VectorOfVariant.size() -> retval

bool VectorOfVariant::empty()

AutoIt:
    VectorOfVariant.empty() -> retval

void VectorOfVariant::clear()

AutoIt:
    VectorOfVariant.clear() -> None

void VectorOfVariant::push_vector( VectorOfVariant other )

AutoIt:
    VectorOfVariant.push_vector( $other ) -> None

void VectorOfVariant::push_vector( VectorOfVariant other
                                   size_t          count
                                   size_t          start = 0 )

AutoIt:
    VectorOfVariant.push_vector( $other, $count[, $start] ) -> None

VectorOfVariant VectorOfVariant::slice( size_t start = 0
                                        size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVariant.slice( [$start[, $count]] ) -> retval

void VectorOfVariant::sort( void*  comparator
                            size_t start = 0
                            size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVariant.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfVariant::sort_variant( void*  comparator
                                    size_t start = 0
                                    size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVariant.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfVariant::start()

AutoIt:
    VectorOfVariant.start() -> retval

void* VectorOfVariant::end()

AutoIt:
    VectorOfVariant.end() -> retval

_variant_t VectorOfVariant::get_Item( size_t vIndex )

AutoIt:
    VectorOfVariant.Item( $vIndex ) -> retval
    VectorOfVariant( $vIndex ) -> retval

void VectorOfVariant::put_Item( size_t     vIndex
                                _variant_t vItem )

AutoIt:
    VectorOfVariant.Item( $vIndex ) = $vItem

VectorOfPairOfULONGAndDouble VectorOfPairOfULONGAndDouble::create()

AutoIt:
    VectorOfPairOfULONGAndDouble.create() -> <VectorOfPairOfULONGAndDouble object>

VectorOfPairOfULONGAndDouble VectorOfPairOfULONGAndDouble::create( size_t size )

AutoIt:
    VectorOfPairOfULONGAndDouble.create( $size ) -> <VectorOfPairOfULONGAndDouble object>

VectorOfPairOfULONGAndDouble VectorOfPairOfULONGAndDouble::create( VectorOfPairOfULONGAndDouble other )

AutoIt:
    VectorOfPairOfULONGAndDouble.create( $other ) -> <VectorOfPairOfULONGAndDouble object>

std::vector<int> VectorOfPairOfULONGAndDouble::Keys()

AutoIt:
    VectorOfPairOfULONGAndDouble.Keys() -> retval

VectorOfPairOfULONGAndDouble VectorOfPairOfULONGAndDouble::Items()

AutoIt:
    VectorOfPairOfULONGAndDouble.Items() -> retval

void VectorOfPairOfULONGAndDouble::push_back( std::pair<ULONG, double> value )

AutoIt:
    VectorOfPairOfULONGAndDouble.push_back( $value ) -> None

void VectorOfPairOfULONGAndDouble::Add( std::pair<ULONG, double> value )

AutoIt:
    VectorOfPairOfULONGAndDouble.Add( $value ) -> None

void VectorOfPairOfULONGAndDouble::Remove( size_t index )

AutoIt:
    VectorOfPairOfULONGAndDouble.Remove( $index ) -> None

std::pair<ULONG, double> VectorOfPairOfULONGAndDouble::at( size_t index )

AutoIt:
    VectorOfPairOfULONGAndDouble.at( $index ) -> retval

void VectorOfPairOfULONGAndDouble::at( size_t                   index
                                       std::pair<ULONG, double> value )

AutoIt:
    VectorOfPairOfULONGAndDouble.at( $index, $value ) -> None

size_t VectorOfPairOfULONGAndDouble::size()

AutoIt:
    VectorOfPairOfULONGAndDouble.size() -> retval

bool VectorOfPairOfULONGAndDouble::empty()

AutoIt:
    VectorOfPairOfULONGAndDouble.empty() -> retval

void VectorOfPairOfULONGAndDouble::clear()

AutoIt:
    VectorOfPairOfULONGAndDouble.clear() -> None

void VectorOfPairOfULONGAndDouble::push_vector( VectorOfPairOfULONGAndDouble other )

AutoIt:
    VectorOfPairOfULONGAndDouble.push_vector( $other ) -> None

void VectorOfPairOfULONGAndDouble::push_vector( VectorOfPairOfULONGAndDouble other
                                                size_t                       count
                                                size_t                       start = 0 )

AutoIt:
    VectorOfPairOfULONGAndDouble.push_vector( $other, $count[, $start] ) -> None

VectorOfPairOfULONGAndDouble VectorOfPairOfULONGAndDouble::slice( size_t start = 0
                                                                  size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfPairOfULONGAndDouble.slice( [$start[, $count]] ) -> retval

void VectorOfPairOfULONGAndDouble::sort( void*  comparator
                                         size_t start = 0
                                         size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfPairOfULONGAndDouble.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfPairOfULONGAndDouble::sort_variant( void*  comparator
                                                 size_t start = 0
                                                 size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfPairOfULONGAndDouble.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfPairOfULONGAndDouble::start()

AutoIt:
    VectorOfPairOfULONGAndDouble.start() -> retval

void* VectorOfPairOfULONGAndDouble::end()

AutoIt:
    VectorOfPairOfULONGAndDouble.end() -> retval

std::pair<ULONG, double> VectorOfPairOfULONGAndDouble::get_Item( size_t vIndex )

AutoIt:
    VectorOfPairOfULONGAndDouble.Item( $vIndex ) -> retval
    VectorOfPairOfULONGAndDouble( $vIndex ) -> retval

void VectorOfPairOfULONGAndDouble::put_Item( size_t                   vIndex
                                             std::pair<ULONG, double> vItem )

AutoIt:
    VectorOfPairOfULONGAndDouble.Item( $vIndex ) = $vItem

VectorOfVectorOfPairOfULONGAndDouble VectorOfVectorOfPairOfULONGAndDouble::create()

AutoIt:
    VectorOfVectorOfPairOfULONGAndDouble.create() -> <VectorOfVectorOfPairOfULONGAndDouble object>

VectorOfVectorOfPairOfULONGAndDouble VectorOfVectorOfPairOfULONGAndDouble::create( size_t size )

AutoIt:
    VectorOfVectorOfPairOfULONGAndDouble.create( $size ) -> <VectorOfVectorOfPairOfULONGAndDouble object>

VectorOfVectorOfPairOfULONGAndDouble VectorOfVectorOfPairOfULONGAndDouble::create( VectorOfVectorOfPairOfULONGAndDouble other )

AutoIt:
    VectorOfVectorOfPairOfULONGAndDouble.create( $other ) -> <VectorOfVectorOfPairOfULONGAndDouble object>

std::vector<int> VectorOfVectorOfPairOfULONGAndDouble::Keys()

AutoIt:
    VectorOfVectorOfPairOfULONGAndDouble.Keys() -> retval

VectorOfVectorOfPairOfULONGAndDouble VectorOfVectorOfPairOfULONGAndDouble::Items()

AutoIt:
    VectorOfVectorOfPairOfULONGAndDouble.Items() -> retval

void VectorOfVectorOfPairOfULONGAndDouble::push_back( std::vector<std::pair<ULONG, double>> value )

AutoIt:
    VectorOfVectorOfPairOfULONGAndDouble.push_back( $value ) -> None

void VectorOfVectorOfPairOfULONGAndDouble::Add( std::vector<std::pair<ULONG, double>> value )

AutoIt:
    VectorOfVectorOfPairOfULONGAndDouble.Add( $value ) -> None

void VectorOfVectorOfPairOfULONGAndDouble::Remove( size_t index )

AutoIt:
    VectorOfVectorOfPairOfULONGAndDouble.Remove( $index ) -> None

std::vector<std::pair<ULONG, double>> VectorOfVectorOfPairOfULONGAndDouble::at( size_t index )

AutoIt:
    VectorOfVectorOfPairOfULONGAndDouble.at( $index ) -> retval

void VectorOfVectorOfPairOfULONGAndDouble::at( size_t                                index
                                               std::vector<std::pair<ULONG, double>> value )

AutoIt:
    VectorOfVectorOfPairOfULONGAndDouble.at( $index, $value ) -> None

size_t VectorOfVectorOfPairOfULONGAndDouble::size()

AutoIt:
    VectorOfVectorOfPairOfULONGAndDouble.size() -> retval

bool VectorOfVectorOfPairOfULONGAndDouble::empty()

AutoIt:
    VectorOfVectorOfPairOfULONGAndDouble.empty() -> retval

void VectorOfVectorOfPairOfULONGAndDouble::clear()

AutoIt:
    VectorOfVectorOfPairOfULONGAndDouble.clear() -> None

void VectorOfVectorOfPairOfULONGAndDouble::push_vector( VectorOfVectorOfPairOfULONGAndDouble other )

AutoIt:
    VectorOfVectorOfPairOfULONGAndDouble.push_vector( $other ) -> None

void VectorOfVectorOfPairOfULONGAndDouble::push_vector( VectorOfVectorOfPairOfULONGAndDouble other
                                                        size_t                               count
                                                        size_t                               start = 0 )

AutoIt:
    VectorOfVectorOfPairOfULONGAndDouble.push_vector( $other, $count[, $start] ) -> None

VectorOfVectorOfPairOfULONGAndDouble VectorOfVectorOfPairOfULONGAndDouble::slice( size_t start = 0
                                                                                  size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVectorOfPairOfULONGAndDouble.slice( [$start[, $count]] ) -> retval

void VectorOfVectorOfPairOfULONGAndDouble::sort( void*  comparator
                                                 size_t start = 0
                                                 size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVectorOfPairOfULONGAndDouble.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfVectorOfPairOfULONGAndDouble::sort_variant( void*  comparator
                                                         size_t start = 0
                                                         size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVectorOfPairOfULONGAndDouble.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfVectorOfPairOfULONGAndDouble::start()

AutoIt:
    VectorOfVectorOfPairOfULONGAndDouble.start() -> retval

void* VectorOfVectorOfPairOfULONGAndDouble::end()

AutoIt:
    VectorOfVectorOfPairOfULONGAndDouble.end() -> retval

std::vector<std::pair<ULONG, double>> VectorOfVectorOfPairOfULONGAndDouble::get_Item( size_t vIndex )

AutoIt:
    VectorOfVectorOfPairOfULONGAndDouble.Item( $vIndex ) -> retval
    VectorOfVectorOfPairOfULONGAndDouble( $vIndex ) -> retval

void VectorOfVectorOfPairOfULONGAndDouble::put_Item( size_t                                vIndex
                                                     std::vector<std::pair<ULONG, double>> vItem )

AutoIt:
    VectorOfVectorOfPairOfULONGAndDouble.Item( $vIndex ) = $vItem

VectorOfMat VectorOfMat::create()

AutoIt:
    VectorOfMat.create() -> <VectorOfMat object>

VectorOfMat VectorOfMat::create( size_t size )

AutoIt:
    VectorOfMat.create( $size ) -> <VectorOfMat object>

VectorOfMat VectorOfMat::create( VectorOfMat other )

AutoIt:
    VectorOfMat.create( $other ) -> <VectorOfMat object>

std::vector<int> VectorOfMat::Keys()

AutoIt:
    VectorOfMat.Keys() -> retval

VectorOfMat VectorOfMat::Items()

AutoIt:
    VectorOfMat.Items() -> retval

void VectorOfMat::push_back( cv::Mat value )

AutoIt:
    VectorOfMat.push_back( $value ) -> None

void VectorOfMat::Add( cv::Mat value )

AutoIt:
    VectorOfMat.Add( $value ) -> None

void VectorOfMat::Remove( size_t index )

AutoIt:
    VectorOfMat.Remove( $index ) -> None

cv::Mat VectorOfMat::at( size_t index )

AutoIt:
    VectorOfMat.at( $index ) -> retval

void VectorOfMat::at( size_t  index
                      cv::Mat value )

AutoIt:
    VectorOfMat.at( $index, $value ) -> None

size_t VectorOfMat::size()

AutoIt:
    VectorOfMat.size() -> retval

bool VectorOfMat::empty()

AutoIt:
    VectorOfMat.empty() -> retval

void VectorOfMat::clear()

AutoIt:
    VectorOfMat.clear() -> None

void VectorOfMat::push_vector( VectorOfMat other )

AutoIt:
    VectorOfMat.push_vector( $other ) -> None

void VectorOfMat::push_vector( VectorOfMat other
                               size_t      count
                               size_t      start = 0 )

AutoIt:
    VectorOfMat.push_vector( $other, $count[, $start] ) -> None

VectorOfMat VectorOfMat::slice( size_t start = 0
                                size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfMat.slice( [$start[, $count]] ) -> retval

void VectorOfMat::sort( void*  comparator
                        size_t start = 0
                        size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfMat.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfMat::sort_variant( void*  comparator
                                size_t start = 0
                                size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfMat.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfMat::start()

AutoIt:
    VectorOfMat.start() -> retval

void* VectorOfMat::end()

AutoIt:
    VectorOfMat.end() -> retval

cv::Mat VectorOfMat::get_Item( size_t vIndex )

AutoIt:
    VectorOfMat.Item( $vIndex ) -> retval
    VectorOfMat( $vIndex ) -> retval

void VectorOfMat::put_Item( size_t  vIndex
                            cv::Mat vItem )

AutoIt:
    VectorOfMat.Item( $vIndex ) = $vItem

VectorOfFull_object_detection VectorOfFull_object_detection::create()

AutoIt:
    VectorOfFull_object_detection.create() -> <VectorOfFull_object_detection object>

VectorOfFull_object_detection VectorOfFull_object_detection::create( size_t size )

AutoIt:
    VectorOfFull_object_detection.create( $size ) -> <VectorOfFull_object_detection object>

VectorOfFull_object_detection VectorOfFull_object_detection::create( VectorOfFull_object_detection other )

AutoIt:
    VectorOfFull_object_detection.create( $other ) -> <VectorOfFull_object_detection object>

std::vector<int> VectorOfFull_object_detection::Keys()

AutoIt:
    VectorOfFull_object_detection.Keys() -> retval

VectorOfFull_object_detection VectorOfFull_object_detection::Items()

AutoIt:
    VectorOfFull_object_detection.Items() -> retval

void VectorOfFull_object_detection::push_back( dlib::full_object_detection value )

AutoIt:
    VectorOfFull_object_detection.push_back( $value ) -> None

void VectorOfFull_object_detection::Add( dlib::full_object_detection value )

AutoIt:
    VectorOfFull_object_detection.Add( $value ) -> None

void VectorOfFull_object_detection::Remove( size_t index )

AutoIt:
    VectorOfFull_object_detection.Remove( $index ) -> None

dlib::full_object_detection VectorOfFull_object_detection::at( size_t index )

AutoIt:
    VectorOfFull_object_detection.at( $index ) -> retval

void VectorOfFull_object_detection::at( size_t                      index
                                        dlib::full_object_detection value )

AutoIt:
    VectorOfFull_object_detection.at( $index, $value ) -> None

size_t VectorOfFull_object_detection::size()

AutoIt:
    VectorOfFull_object_detection.size() -> retval

bool VectorOfFull_object_detection::empty()

AutoIt:
    VectorOfFull_object_detection.empty() -> retval

void VectorOfFull_object_detection::clear()

AutoIt:
    VectorOfFull_object_detection.clear() -> None

void VectorOfFull_object_detection::push_vector( VectorOfFull_object_detection other )

AutoIt:
    VectorOfFull_object_detection.push_vector( $other ) -> None

void VectorOfFull_object_detection::push_vector( VectorOfFull_object_detection other
                                                 size_t                        count
                                                 size_t                        start = 0 )

AutoIt:
    VectorOfFull_object_detection.push_vector( $other, $count[, $start] ) -> None

VectorOfFull_object_detection VectorOfFull_object_detection::slice( size_t start = 0
                                                                    size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfFull_object_detection.slice( [$start[, $count]] ) -> retval

void VectorOfFull_object_detection::sort( void*  comparator
                                          size_t start = 0
                                          size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfFull_object_detection.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfFull_object_detection::sort_variant( void*  comparator
                                                  size_t start = 0
                                                  size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfFull_object_detection.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfFull_object_detection::start()

AutoIt:
    VectorOfFull_object_detection.start() -> retval

void* VectorOfFull_object_detection::end()

AutoIt:
    VectorOfFull_object_detection.end() -> retval

dlib::full_object_detection VectorOfFull_object_detection::get_Item( size_t vIndex )

AutoIt:
    VectorOfFull_object_detection.Item( $vIndex ) -> retval
    VectorOfFull_object_detection( $vIndex ) -> retval

void VectorOfFull_object_detection::put_Item( size_t                      vIndex
                                              dlib::full_object_detection vItem )

AutoIt:
    VectorOfFull_object_detection.Item( $vIndex ) = $vItem

VectorOfSpaceVector VectorOfSpaceVector::create()

AutoIt:
    VectorOfSpaceVector.create() -> <VectorOfSpaceVector object>

VectorOfSpaceVector VectorOfSpaceVector::create( size_t size )

AutoIt:
    VectorOfSpaceVector.create( $size ) -> <VectorOfSpaceVector object>

VectorOfSpaceVector VectorOfSpaceVector::create( VectorOfSpaceVector other )

AutoIt:
    VectorOfSpaceVector.create( $other ) -> <VectorOfSpaceVector object>

std::vector<int> VectorOfSpaceVector::Keys()

AutoIt:
    VectorOfSpaceVector.Keys() -> retval

VectorOfSpaceVector VectorOfSpaceVector::Items()

AutoIt:
    VectorOfSpaceVector.Items() -> retval

void VectorOfSpaceVector::push_back( dlib::SpaceVector value )

AutoIt:
    VectorOfSpaceVector.push_back( $value ) -> None

void VectorOfSpaceVector::Add( dlib::SpaceVector value )

AutoIt:
    VectorOfSpaceVector.Add( $value ) -> None

void VectorOfSpaceVector::Remove( size_t index )

AutoIt:
    VectorOfSpaceVector.Remove( $index ) -> None

dlib::SpaceVector VectorOfSpaceVector::at( size_t index )

AutoIt:
    VectorOfSpaceVector.at( $index ) -> retval

void VectorOfSpaceVector::at( size_t            index
                              dlib::SpaceVector value )

AutoIt:
    VectorOfSpaceVector.at( $index, $value ) -> None

size_t VectorOfSpaceVector::size()

AutoIt:
    VectorOfSpaceVector.size() -> retval

bool VectorOfSpaceVector::empty()

AutoIt:
    VectorOfSpaceVector.empty() -> retval

void VectorOfSpaceVector::clear()

AutoIt:
    VectorOfSpaceVector.clear() -> None

void VectorOfSpaceVector::push_vector( VectorOfSpaceVector other )

AutoIt:
    VectorOfSpaceVector.push_vector( $other ) -> None

void VectorOfSpaceVector::push_vector( VectorOfSpaceVector other
                                       size_t              count
                                       size_t              start = 0 )

AutoIt:
    VectorOfSpaceVector.push_vector( $other, $count[, $start] ) -> None

VectorOfSpaceVector VectorOfSpaceVector::slice( size_t start = 0
                                                size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfSpaceVector.slice( [$start[, $count]] ) -> retval

void VectorOfSpaceVector::sort( void*  comparator
                                size_t start = 0
                                size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfSpaceVector.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfSpaceVector::sort_variant( void*  comparator
                                        size_t start = 0
                                        size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfSpaceVector.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfSpaceVector::start()

AutoIt:
    VectorOfSpaceVector.start() -> retval

void* VectorOfSpaceVector::end()

AutoIt:
    VectorOfSpaceVector.end() -> retval

dlib::SpaceVector VectorOfSpaceVector::get_Item( size_t vIndex )

AutoIt:
    VectorOfSpaceVector.Item( $vIndex ) -> retval
    VectorOfSpaceVector( $vIndex ) -> retval

void VectorOfSpaceVector::put_Item( size_t            vIndex
                                    dlib::SpaceVector vItem )

AutoIt:
    VectorOfSpaceVector.Item( $vIndex ) = $vItem

VectorOfULONG VectorOfULONG::create()

AutoIt:
    VectorOfULONG.create() -> <VectorOfULONG object>

VectorOfULONG VectorOfULONG::create( size_t size )

AutoIt:
    VectorOfULONG.create( $size ) -> <VectorOfULONG object>

VectorOfULONG VectorOfULONG::create( VectorOfULONG other )

AutoIt:
    VectorOfULONG.create( $other ) -> <VectorOfULONG object>

std::vector<int> VectorOfULONG::Keys()

AutoIt:
    VectorOfULONG.Keys() -> retval

VectorOfULONG VectorOfULONG::Items()

AutoIt:
    VectorOfULONG.Items() -> retval

void VectorOfULONG::push_back( ULONG value )

AutoIt:
    VectorOfULONG.push_back( $value ) -> None

void VectorOfULONG::Add( ULONG value )

AutoIt:
    VectorOfULONG.Add( $value ) -> None

void VectorOfULONG::Remove( size_t index )

AutoIt:
    VectorOfULONG.Remove( $index ) -> None

ULONG VectorOfULONG::at( size_t index )

AutoIt:
    VectorOfULONG.at( $index ) -> retval

void VectorOfULONG::at( size_t index
                        ULONG  value )

AutoIt:
    VectorOfULONG.at( $index, $value ) -> None

size_t VectorOfULONG::size()

AutoIt:
    VectorOfULONG.size() -> retval

bool VectorOfULONG::empty()

AutoIt:
    VectorOfULONG.empty() -> retval

void VectorOfULONG::clear()

AutoIt:
    VectorOfULONG.clear() -> None

void VectorOfULONG::push_vector( VectorOfULONG other )

AutoIt:
    VectorOfULONG.push_vector( $other ) -> None

void VectorOfULONG::push_vector( VectorOfULONG other
                                 size_t        count
                                 size_t        start = 0 )

AutoIt:
    VectorOfULONG.push_vector( $other, $count[, $start] ) -> None

VectorOfULONG VectorOfULONG::slice( size_t start = 0
                                    size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfULONG.slice( [$start[, $count]] ) -> retval

void VectorOfULONG::sort( void*  comparator
                          size_t start = 0
                          size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfULONG.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfULONG::sort_variant( void*  comparator
                                  size_t start = 0
                                  size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfULONG.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfULONG::start()

AutoIt:
    VectorOfULONG.start() -> retval

void* VectorOfULONG::end()

AutoIt:
    VectorOfULONG.end() -> retval

ULONG VectorOfULONG::get_Item( size_t vIndex )

AutoIt:
    VectorOfULONG.Item( $vIndex ) -> retval
    VectorOfULONG( $vIndex ) -> retval

void VectorOfULONG::put_Item( size_t vIndex
                              ULONG  vItem )

AutoIt:
    VectorOfULONG.Item( $vIndex ) = $vItem

VectorOfRectangle VectorOfRectangle::create()

AutoIt:
    VectorOfRectangle.create() -> <VectorOfRectangle object>

VectorOfRectangle VectorOfRectangle::create( size_t size )

AutoIt:
    VectorOfRectangle.create( $size ) -> <VectorOfRectangle object>

VectorOfRectangle VectorOfRectangle::create( VectorOfRectangle other )

AutoIt:
    VectorOfRectangle.create( $other ) -> <VectorOfRectangle object>

std::vector<int> VectorOfRectangle::Keys()

AutoIt:
    VectorOfRectangle.Keys() -> retval

VectorOfRectangle VectorOfRectangle::Items()

AutoIt:
    VectorOfRectangle.Items() -> retval

void VectorOfRectangle::push_back( dlib::rectangle value )

AutoIt:
    VectorOfRectangle.push_back( $value ) -> None

void VectorOfRectangle::Add( dlib::rectangle value )

AutoIt:
    VectorOfRectangle.Add( $value ) -> None

void VectorOfRectangle::Remove( size_t index )

AutoIt:
    VectorOfRectangle.Remove( $index ) -> None

dlib::rectangle VectorOfRectangle::at( size_t index )

AutoIt:
    VectorOfRectangle.at( $index ) -> retval

void VectorOfRectangle::at( size_t          index
                            dlib::rectangle value )

AutoIt:
    VectorOfRectangle.at( $index, $value ) -> None

size_t VectorOfRectangle::size()

AutoIt:
    VectorOfRectangle.size() -> retval

bool VectorOfRectangle::empty()

AutoIt:
    VectorOfRectangle.empty() -> retval

void VectorOfRectangle::clear()

AutoIt:
    VectorOfRectangle.clear() -> None

void VectorOfRectangle::push_vector( VectorOfRectangle other )

AutoIt:
    VectorOfRectangle.push_vector( $other ) -> None

void VectorOfRectangle::push_vector( VectorOfRectangle other
                                     size_t            count
                                     size_t            start = 0 )

AutoIt:
    VectorOfRectangle.push_vector( $other, $count[, $start] ) -> None

VectorOfRectangle VectorOfRectangle::slice( size_t start = 0
                                            size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfRectangle.slice( [$start[, $count]] ) -> retval

void VectorOfRectangle::sort( void*  comparator
                              size_t start = 0
                              size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfRectangle.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfRectangle::sort_variant( void*  comparator
                                      size_t start = 0
                                      size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfRectangle.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfRectangle::start()

AutoIt:
    VectorOfRectangle.start() -> retval

void* VectorOfRectangle::end()

AutoIt:
    VectorOfRectangle.end() -> retval

dlib::rectangle VectorOfRectangle::get_Item( size_t vIndex )

AutoIt:
    VectorOfRectangle.Item( $vIndex ) -> retval
    VectorOfRectangle( $vIndex ) -> retval

void VectorOfRectangle::put_Item( size_t          vIndex
                                  dlib::rectangle vItem )

AutoIt:
    VectorOfRectangle.Item( $vIndex ) = $vItem

VectorOfLong VectorOfLong::create()

AutoIt:
    VectorOfLong.create() -> <VectorOfLong object>

VectorOfLong VectorOfLong::create( size_t size )

AutoIt:
    VectorOfLong.create( $size ) -> <VectorOfLong object>

VectorOfLong VectorOfLong::create( VectorOfLong other )

AutoIt:
    VectorOfLong.create( $other ) -> <VectorOfLong object>

std::vector<int> VectorOfLong::Keys()

AutoIt:
    VectorOfLong.Keys() -> retval

VectorOfLong VectorOfLong::Items()

AutoIt:
    VectorOfLong.Items() -> retval

void VectorOfLong::push_back( long value )

AutoIt:
    VectorOfLong.push_back( $value ) -> None

void VectorOfLong::Add( long value )

AutoIt:
    VectorOfLong.Add( $value ) -> None

void VectorOfLong::Remove( size_t index )

AutoIt:
    VectorOfLong.Remove( $index ) -> None

long VectorOfLong::at( size_t index )

AutoIt:
    VectorOfLong.at( $index ) -> retval

void VectorOfLong::at( size_t index
                       long   value )

AutoIt:
    VectorOfLong.at( $index, $value ) -> None

size_t VectorOfLong::size()

AutoIt:
    VectorOfLong.size() -> retval

bool VectorOfLong::empty()

AutoIt:
    VectorOfLong.empty() -> retval

void VectorOfLong::clear()

AutoIt:
    VectorOfLong.clear() -> None

void VectorOfLong::push_vector( VectorOfLong other )

AutoIt:
    VectorOfLong.push_vector( $other ) -> None

void VectorOfLong::push_vector( VectorOfLong other
                                size_t       count
                                size_t       start = 0 )

AutoIt:
    VectorOfLong.push_vector( $other, $count[, $start] ) -> None

VectorOfLong VectorOfLong::slice( size_t start = 0
                                  size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfLong.slice( [$start[, $count]] ) -> retval

void VectorOfLong::sort( void*  comparator
                         size_t start = 0
                         size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfLong.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfLong::sort_variant( void*  comparator
                                 size_t start = 0
                                 size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfLong.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfLong::start()

AutoIt:
    VectorOfLong.start() -> retval

void* VectorOfLong::end()

AutoIt:
    VectorOfLong.end() -> retval

long VectorOfLong::get_Item( size_t vIndex )

AutoIt:
    VectorOfLong.Item( $vIndex ) -> retval
    VectorOfLong( $vIndex ) -> retval

void VectorOfLong::put_Item( size_t vIndex
                             long   vItem )

AutoIt:
    VectorOfLong.Item( $vIndex ) = $vItem

VectorOfDouble VectorOfDouble::create()

AutoIt:
    VectorOfDouble.create() -> <VectorOfDouble object>

VectorOfDouble VectorOfDouble::create( size_t size )

AutoIt:
    VectorOfDouble.create( $size ) -> <VectorOfDouble object>

VectorOfDouble VectorOfDouble::create( VectorOfDouble other )

AutoIt:
    VectorOfDouble.create( $other ) -> <VectorOfDouble object>

std::vector<int> VectorOfDouble::Keys()

AutoIt:
    VectorOfDouble.Keys() -> retval

VectorOfDouble VectorOfDouble::Items()

AutoIt:
    VectorOfDouble.Items() -> retval

void VectorOfDouble::push_back( double value )

AutoIt:
    VectorOfDouble.push_back( $value ) -> None

void VectorOfDouble::Add( double value )

AutoIt:
    VectorOfDouble.Add( $value ) -> None

void VectorOfDouble::Remove( size_t index )

AutoIt:
    VectorOfDouble.Remove( $index ) -> None

double VectorOfDouble::at( size_t index )

AutoIt:
    VectorOfDouble.at( $index ) -> retval

void VectorOfDouble::at( size_t index
                         double value )

AutoIt:
    VectorOfDouble.at( $index, $value ) -> None

size_t VectorOfDouble::size()

AutoIt:
    VectorOfDouble.size() -> retval

bool VectorOfDouble::empty()

AutoIt:
    VectorOfDouble.empty() -> retval

void VectorOfDouble::clear()

AutoIt:
    VectorOfDouble.clear() -> None

void VectorOfDouble::push_vector( VectorOfDouble other )

AutoIt:
    VectorOfDouble.push_vector( $other ) -> None

void VectorOfDouble::push_vector( VectorOfDouble other
                                  size_t         count
                                  size_t         start = 0 )

AutoIt:
    VectorOfDouble.push_vector( $other, $count[, $start] ) -> None

VectorOfDouble VectorOfDouble::slice( size_t start = 0
                                      size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfDouble.slice( [$start[, $count]] ) -> retval

void VectorOfDouble::sort( void*  comparator
                           size_t start = 0
                           size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfDouble.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfDouble::sort_variant( void*  comparator
                                   size_t start = 0
                                   size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfDouble.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfDouble::start()

AutoIt:
    VectorOfDouble.start() -> retval

void* VectorOfDouble::end()

AutoIt:
    VectorOfDouble.end() -> retval

double VectorOfDouble::get_Item( size_t vIndex )

AutoIt:
    VectorOfDouble.Item( $vIndex ) -> retval
    VectorOfDouble( $vIndex ) -> retval

void VectorOfDouble::put_Item( size_t vIndex
                               double vItem )

AutoIt:
    VectorOfDouble.Item( $vIndex ) = $vItem

VectorOfVectorOfSpaceVector VectorOfVectorOfSpaceVector::create()

AutoIt:
    VectorOfVectorOfSpaceVector.create() -> <VectorOfVectorOfSpaceVector object>

VectorOfVectorOfSpaceVector VectorOfVectorOfSpaceVector::create( size_t size )

AutoIt:
    VectorOfVectorOfSpaceVector.create( $size ) -> <VectorOfVectorOfSpaceVector object>

VectorOfVectorOfSpaceVector VectorOfVectorOfSpaceVector::create( VectorOfVectorOfSpaceVector other )

AutoIt:
    VectorOfVectorOfSpaceVector.create( $other ) -> <VectorOfVectorOfSpaceVector object>

std::vector<int> VectorOfVectorOfSpaceVector::Keys()

AutoIt:
    VectorOfVectorOfSpaceVector.Keys() -> retval

VectorOfVectorOfSpaceVector VectorOfVectorOfSpaceVector::Items()

AutoIt:
    VectorOfVectorOfSpaceVector.Items() -> retval

void VectorOfVectorOfSpaceVector::push_back( std::vector<dlib::SpaceVector> value )

AutoIt:
    VectorOfVectorOfSpaceVector.push_back( $value ) -> None

void VectorOfVectorOfSpaceVector::Add( std::vector<dlib::SpaceVector> value )

AutoIt:
    VectorOfVectorOfSpaceVector.Add( $value ) -> None

void VectorOfVectorOfSpaceVector::Remove( size_t index )

AutoIt:
    VectorOfVectorOfSpaceVector.Remove( $index ) -> None

std::vector<dlib::SpaceVector> VectorOfVectorOfSpaceVector::at( size_t index )

AutoIt:
    VectorOfVectorOfSpaceVector.at( $index ) -> retval

void VectorOfVectorOfSpaceVector::at( size_t                         index
                                      std::vector<dlib::SpaceVector> value )

AutoIt:
    VectorOfVectorOfSpaceVector.at( $index, $value ) -> None

size_t VectorOfVectorOfSpaceVector::size()

AutoIt:
    VectorOfVectorOfSpaceVector.size() -> retval

bool VectorOfVectorOfSpaceVector::empty()

AutoIt:
    VectorOfVectorOfSpaceVector.empty() -> retval

void VectorOfVectorOfSpaceVector::clear()

AutoIt:
    VectorOfVectorOfSpaceVector.clear() -> None

void VectorOfVectorOfSpaceVector::push_vector( VectorOfVectorOfSpaceVector other )

AutoIt:
    VectorOfVectorOfSpaceVector.push_vector( $other ) -> None

void VectorOfVectorOfSpaceVector::push_vector( VectorOfVectorOfSpaceVector other
                                               size_t                      count
                                               size_t                      start = 0 )

AutoIt:
    VectorOfVectorOfSpaceVector.push_vector( $other, $count[, $start] ) -> None

VectorOfVectorOfSpaceVector VectorOfVectorOfSpaceVector::slice( size_t start = 0
                                                                size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVectorOfSpaceVector.slice( [$start[, $count]] ) -> retval

void VectorOfVectorOfSpaceVector::sort( void*  comparator
                                        size_t start = 0
                                        size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVectorOfSpaceVector.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfVectorOfSpaceVector::sort_variant( void*  comparator
                                                size_t start = 0
                                                size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVectorOfSpaceVector.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfVectorOfSpaceVector::start()

AutoIt:
    VectorOfVectorOfSpaceVector.start() -> retval

void* VectorOfVectorOfSpaceVector::end()

AutoIt:
    VectorOfVectorOfSpaceVector.end() -> retval

std::vector<dlib::SpaceVector> VectorOfVectorOfSpaceVector::get_Item( size_t vIndex )

AutoIt:
    VectorOfVectorOfSpaceVector.Item( $vIndex ) -> retval
    VectorOfVectorOfSpaceVector( $vIndex ) -> retval

void VectorOfVectorOfSpaceVector::put_Item( size_t                         vIndex
                                            std::vector<dlib::SpaceVector> vItem )

AutoIt:
    VectorOfVectorOfSpaceVector.Item( $vIndex ) = $vItem

VectorOfPairOfULONGAndULONG VectorOfPairOfULONGAndULONG::create()

AutoIt:
    VectorOfPairOfULONGAndULONG.create() -> <VectorOfPairOfULONGAndULONG object>

VectorOfPairOfULONGAndULONG VectorOfPairOfULONGAndULONG::create( size_t size )

AutoIt:
    VectorOfPairOfULONGAndULONG.create( $size ) -> <VectorOfPairOfULONGAndULONG object>

VectorOfPairOfULONGAndULONG VectorOfPairOfULONGAndULONG::create( VectorOfPairOfULONGAndULONG other )

AutoIt:
    VectorOfPairOfULONGAndULONG.create( $other ) -> <VectorOfPairOfULONGAndULONG object>

std::vector<int> VectorOfPairOfULONGAndULONG::Keys()

AutoIt:
    VectorOfPairOfULONGAndULONG.Keys() -> retval

VectorOfPairOfULONGAndULONG VectorOfPairOfULONGAndULONG::Items()

AutoIt:
    VectorOfPairOfULONGAndULONG.Items() -> retval

void VectorOfPairOfULONGAndULONG::push_back( std::pair<ULONG, ULONG> value )

AutoIt:
    VectorOfPairOfULONGAndULONG.push_back( $value ) -> None

void VectorOfPairOfULONGAndULONG::Add( std::pair<ULONG, ULONG> value )

AutoIt:
    VectorOfPairOfULONGAndULONG.Add( $value ) -> None

void VectorOfPairOfULONGAndULONG::Remove( size_t index )

AutoIt:
    VectorOfPairOfULONGAndULONG.Remove( $index ) -> None

std::pair<ULONG, ULONG> VectorOfPairOfULONGAndULONG::at( size_t index )

AutoIt:
    VectorOfPairOfULONGAndULONG.at( $index ) -> retval

void VectorOfPairOfULONGAndULONG::at( size_t                  index
                                      std::pair<ULONG, ULONG> value )

AutoIt:
    VectorOfPairOfULONGAndULONG.at( $index, $value ) -> None

size_t VectorOfPairOfULONGAndULONG::size()

AutoIt:
    VectorOfPairOfULONGAndULONG.size() -> retval

bool VectorOfPairOfULONGAndULONG::empty()

AutoIt:
    VectorOfPairOfULONGAndULONG.empty() -> retval

void VectorOfPairOfULONGAndULONG::clear()

AutoIt:
    VectorOfPairOfULONGAndULONG.clear() -> None

void VectorOfPairOfULONGAndULONG::push_vector( VectorOfPairOfULONGAndULONG other )

AutoIt:
    VectorOfPairOfULONGAndULONG.push_vector( $other ) -> None

void VectorOfPairOfULONGAndULONG::push_vector( VectorOfPairOfULONGAndULONG other
                                               size_t                      count
                                               size_t                      start = 0 )

AutoIt:
    VectorOfPairOfULONGAndULONG.push_vector( $other, $count[, $start] ) -> None

VectorOfPairOfULONGAndULONG VectorOfPairOfULONGAndULONG::slice( size_t start = 0
                                                                size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfPairOfULONGAndULONG.slice( [$start[, $count]] ) -> retval

void VectorOfPairOfULONGAndULONG::sort( void*  comparator
                                        size_t start = 0
                                        size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfPairOfULONGAndULONG.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfPairOfULONGAndULONG::sort_variant( void*  comparator
                                                size_t start = 0
                                                size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfPairOfULONGAndULONG.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfPairOfULONGAndULONG::start()

AutoIt:
    VectorOfPairOfULONGAndULONG.start() -> retval

void* VectorOfPairOfULONGAndULONG::end()

AutoIt:
    VectorOfPairOfULONGAndULONG.end() -> retval

std::pair<ULONG, ULONG> VectorOfPairOfULONGAndULONG::get_Item( size_t vIndex )

AutoIt:
    VectorOfPairOfULONGAndULONG.Item( $vIndex ) -> retval
    VectorOfPairOfULONGAndULONG( $vIndex ) -> retval

void VectorOfPairOfULONGAndULONG::put_Item( size_t                  vIndex
                                            std::pair<ULONG, ULONG> vItem )

AutoIt:
    VectorOfPairOfULONGAndULONG.Item( $vIndex ) = $vItem

VectorOfVectorOfPairOfULONGAndULONG VectorOfVectorOfPairOfULONGAndULONG::create()

AutoIt:
    VectorOfVectorOfPairOfULONGAndULONG.create() -> <VectorOfVectorOfPairOfULONGAndULONG object>

VectorOfVectorOfPairOfULONGAndULONG VectorOfVectorOfPairOfULONGAndULONG::create( size_t size )

AutoIt:
    VectorOfVectorOfPairOfULONGAndULONG.create( $size ) -> <VectorOfVectorOfPairOfULONGAndULONG object>

VectorOfVectorOfPairOfULONGAndULONG VectorOfVectorOfPairOfULONGAndULONG::create( VectorOfVectorOfPairOfULONGAndULONG other )

AutoIt:
    VectorOfVectorOfPairOfULONGAndULONG.create( $other ) -> <VectorOfVectorOfPairOfULONGAndULONG object>

std::vector<int> VectorOfVectorOfPairOfULONGAndULONG::Keys()

AutoIt:
    VectorOfVectorOfPairOfULONGAndULONG.Keys() -> retval

VectorOfVectorOfPairOfULONGAndULONG VectorOfVectorOfPairOfULONGAndULONG::Items()

AutoIt:
    VectorOfVectorOfPairOfULONGAndULONG.Items() -> retval

void VectorOfVectorOfPairOfULONGAndULONG::push_back( std::vector<std::pair<ULONG, ULONG>> value )

AutoIt:
    VectorOfVectorOfPairOfULONGAndULONG.push_back( $value ) -> None

void VectorOfVectorOfPairOfULONGAndULONG::Add( std::vector<std::pair<ULONG, ULONG>> value )

AutoIt:
    VectorOfVectorOfPairOfULONGAndULONG.Add( $value ) -> None

void VectorOfVectorOfPairOfULONGAndULONG::Remove( size_t index )

AutoIt:
    VectorOfVectorOfPairOfULONGAndULONG.Remove( $index ) -> None

std::vector<std::pair<ULONG, ULONG>> VectorOfVectorOfPairOfULONGAndULONG::at( size_t index )

AutoIt:
    VectorOfVectorOfPairOfULONGAndULONG.at( $index ) -> retval

void VectorOfVectorOfPairOfULONGAndULONG::at( size_t                               index
                                              std::vector<std::pair<ULONG, ULONG>> value )

AutoIt:
    VectorOfVectorOfPairOfULONGAndULONG.at( $index, $value ) -> None

size_t VectorOfVectorOfPairOfULONGAndULONG::size()

AutoIt:
    VectorOfVectorOfPairOfULONGAndULONG.size() -> retval

bool VectorOfVectorOfPairOfULONGAndULONG::empty()

AutoIt:
    VectorOfVectorOfPairOfULONGAndULONG.empty() -> retval

void VectorOfVectorOfPairOfULONGAndULONG::clear()

AutoIt:
    VectorOfVectorOfPairOfULONGAndULONG.clear() -> None

void VectorOfVectorOfPairOfULONGAndULONG::push_vector( VectorOfVectorOfPairOfULONGAndULONG other )

AutoIt:
    VectorOfVectorOfPairOfULONGAndULONG.push_vector( $other ) -> None

void VectorOfVectorOfPairOfULONGAndULONG::push_vector( VectorOfVectorOfPairOfULONGAndULONG other
                                                       size_t                              count
                                                       size_t                              start = 0 )

AutoIt:
    VectorOfVectorOfPairOfULONGAndULONG.push_vector( $other, $count[, $start] ) -> None

VectorOfVectorOfPairOfULONGAndULONG VectorOfVectorOfPairOfULONGAndULONG::slice( size_t start = 0
                                                                                size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVectorOfPairOfULONGAndULONG.slice( [$start[, $count]] ) -> retval

void VectorOfVectorOfPairOfULONGAndULONG::sort( void*  comparator
                                                size_t start = 0
                                                size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVectorOfPairOfULONGAndULONG.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfVectorOfPairOfULONGAndULONG::sort_variant( void*  comparator
                                                        size_t start = 0
                                                        size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVectorOfPairOfULONGAndULONG.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfVectorOfPairOfULONGAndULONG::start()

AutoIt:
    VectorOfVectorOfPairOfULONGAndULONG.start() -> retval

void* VectorOfVectorOfPairOfULONGAndULONG::end()

AutoIt:
    VectorOfVectorOfPairOfULONGAndULONG.end() -> retval

std::vector<std::pair<ULONG, ULONG>> VectorOfVectorOfPairOfULONGAndULONG::get_Item( size_t vIndex )

AutoIt:
    VectorOfVectorOfPairOfULONGAndULONG.Item( $vIndex ) -> retval
    VectorOfVectorOfPairOfULONGAndULONG( $vIndex ) -> retval

void VectorOfVectorOfPairOfULONGAndULONG::put_Item( size_t                               vIndex
                                                    std::vector<std::pair<ULONG, ULONG>> vItem )

AutoIt:
    VectorOfVectorOfPairOfULONGAndULONG.Item( $vIndex ) = $vItem

VectorOfVectorOfVectorOfPairOfULONGAndDouble VectorOfVectorOfVectorOfPairOfULONGAndDouble::create()

AutoIt:
    VectorOfVectorOfVectorOfPairOfULONGAndDouble.create() -> <VectorOfVectorOfVectorOfPairOfULONGAndDouble object>

VectorOfVectorOfVectorOfPairOfULONGAndDouble VectorOfVectorOfVectorOfPairOfULONGAndDouble::create( size_t size )

AutoIt:
    VectorOfVectorOfVectorOfPairOfULONGAndDouble.create( $size ) -> <VectorOfVectorOfVectorOfPairOfULONGAndDouble object>

VectorOfVectorOfVectorOfPairOfULONGAndDouble VectorOfVectorOfVectorOfPairOfULONGAndDouble::create( VectorOfVectorOfVectorOfPairOfULONGAndDouble other )

AutoIt:
    VectorOfVectorOfVectorOfPairOfULONGAndDouble.create( $other ) -> <VectorOfVectorOfVectorOfPairOfULONGAndDouble object>

std::vector<int> VectorOfVectorOfVectorOfPairOfULONGAndDouble::Keys()

AutoIt:
    VectorOfVectorOfVectorOfPairOfULONGAndDouble.Keys() -> retval

VectorOfVectorOfVectorOfPairOfULONGAndDouble VectorOfVectorOfVectorOfPairOfULONGAndDouble::Items()

AutoIt:
    VectorOfVectorOfVectorOfPairOfULONGAndDouble.Items() -> retval

void VectorOfVectorOfVectorOfPairOfULONGAndDouble::push_back( std::vector<std::vector<std::pair<ULONG, double>>> value )

AutoIt:
    VectorOfVectorOfVectorOfPairOfULONGAndDouble.push_back( $value ) -> None

void VectorOfVectorOfVectorOfPairOfULONGAndDouble::Add( std::vector<std::vector<std::pair<ULONG, double>>> value )

AutoIt:
    VectorOfVectorOfVectorOfPairOfULONGAndDouble.Add( $value ) -> None

void VectorOfVectorOfVectorOfPairOfULONGAndDouble::Remove( size_t index )

AutoIt:
    VectorOfVectorOfVectorOfPairOfULONGAndDouble.Remove( $index ) -> None

std::vector<std::vector<std::pair<ULONG, double>>> VectorOfVectorOfVectorOfPairOfULONGAndDouble::at( size_t index )

AutoIt:
    VectorOfVectorOfVectorOfPairOfULONGAndDouble.at( $index ) -> retval

void VectorOfVectorOfVectorOfPairOfULONGAndDouble::at( size_t                                             index
                                                       std::vector<std::vector<std::pair<ULONG, double>>> value )

AutoIt:
    VectorOfVectorOfVectorOfPairOfULONGAndDouble.at( $index, $value ) -> None

size_t VectorOfVectorOfVectorOfPairOfULONGAndDouble::size()

AutoIt:
    VectorOfVectorOfVectorOfPairOfULONGAndDouble.size() -> retval

bool VectorOfVectorOfVectorOfPairOfULONGAndDouble::empty()

AutoIt:
    VectorOfVectorOfVectorOfPairOfULONGAndDouble.empty() -> retval

void VectorOfVectorOfVectorOfPairOfULONGAndDouble::clear()

AutoIt:
    VectorOfVectorOfVectorOfPairOfULONGAndDouble.clear() -> None

void VectorOfVectorOfVectorOfPairOfULONGAndDouble::push_vector( VectorOfVectorOfVectorOfPairOfULONGAndDouble other )

AutoIt:
    VectorOfVectorOfVectorOfPairOfULONGAndDouble.push_vector( $other ) -> None

void VectorOfVectorOfVectorOfPairOfULONGAndDouble::push_vector( VectorOfVectorOfVectorOfPairOfULONGAndDouble other
                                                                size_t                                       count
                                                                size_t                                       start = 0 )

AutoIt:
    VectorOfVectorOfVectorOfPairOfULONGAndDouble.push_vector( $other, $count[, $start] ) -> None

VectorOfVectorOfVectorOfPairOfULONGAndDouble VectorOfVectorOfVectorOfPairOfULONGAndDouble::slice( size_t start = 0
                                                                                                  size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVectorOfVectorOfPairOfULONGAndDouble.slice( [$start[, $count]] ) -> retval

void VectorOfVectorOfVectorOfPairOfULONGAndDouble::sort( void*  comparator
                                                         size_t start = 0
                                                         size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVectorOfVectorOfPairOfULONGAndDouble.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfVectorOfVectorOfPairOfULONGAndDouble::sort_variant( void*  comparator
                                                                 size_t start = 0
                                                                 size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVectorOfVectorOfPairOfULONGAndDouble.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfVectorOfVectorOfPairOfULONGAndDouble::start()

AutoIt:
    VectorOfVectorOfVectorOfPairOfULONGAndDouble.start() -> retval

void* VectorOfVectorOfVectorOfPairOfULONGAndDouble::end()

AutoIt:
    VectorOfVectorOfVectorOfPairOfULONGAndDouble.end() -> retval

std::vector<std::vector<std::pair<ULONG, double>>> VectorOfVectorOfVectorOfPairOfULONGAndDouble::get_Item( size_t vIndex )

AutoIt:
    VectorOfVectorOfVectorOfPairOfULONGAndDouble.Item( $vIndex ) -> retval
    VectorOfVectorOfVectorOfPairOfULONGAndDouble( $vIndex ) -> retval

void VectorOfVectorOfVectorOfPairOfULONGAndDouble::put_Item( size_t                                             vIndex
                                                             std::vector<std::vector<std::pair<ULONG, double>>> vItem )

AutoIt:
    VectorOfVectorOfVectorOfPairOfULONGAndDouble.Item( $vIndex ) = $vItem

VectorOfVectorOfFull_object_detection VectorOfVectorOfFull_object_detection::create()

AutoIt:
    VectorOfVectorOfFull_object_detection.create() -> <VectorOfVectorOfFull_object_detection object>

VectorOfVectorOfFull_object_detection VectorOfVectorOfFull_object_detection::create( size_t size )

AutoIt:
    VectorOfVectorOfFull_object_detection.create( $size ) -> <VectorOfVectorOfFull_object_detection object>

VectorOfVectorOfFull_object_detection VectorOfVectorOfFull_object_detection::create( VectorOfVectorOfFull_object_detection other )

AutoIt:
    VectorOfVectorOfFull_object_detection.create( $other ) -> <VectorOfVectorOfFull_object_detection object>

std::vector<int> VectorOfVectorOfFull_object_detection::Keys()

AutoIt:
    VectorOfVectorOfFull_object_detection.Keys() -> retval

VectorOfVectorOfFull_object_detection VectorOfVectorOfFull_object_detection::Items()

AutoIt:
    VectorOfVectorOfFull_object_detection.Items() -> retval

void VectorOfVectorOfFull_object_detection::push_back( std::vector<dlib::full_object_detection> value )

AutoIt:
    VectorOfVectorOfFull_object_detection.push_back( $value ) -> None

void VectorOfVectorOfFull_object_detection::Add( std::vector<dlib::full_object_detection> value )

AutoIt:
    VectorOfVectorOfFull_object_detection.Add( $value ) -> None

void VectorOfVectorOfFull_object_detection::Remove( size_t index )

AutoIt:
    VectorOfVectorOfFull_object_detection.Remove( $index ) -> None

std::vector<dlib::full_object_detection> VectorOfVectorOfFull_object_detection::at( size_t index )

AutoIt:
    VectorOfVectorOfFull_object_detection.at( $index ) -> retval

void VectorOfVectorOfFull_object_detection::at( size_t                                   index
                                                std::vector<dlib::full_object_detection> value )

AutoIt:
    VectorOfVectorOfFull_object_detection.at( $index, $value ) -> None

size_t VectorOfVectorOfFull_object_detection::size()

AutoIt:
    VectorOfVectorOfFull_object_detection.size() -> retval

bool VectorOfVectorOfFull_object_detection::empty()

AutoIt:
    VectorOfVectorOfFull_object_detection.empty() -> retval

void VectorOfVectorOfFull_object_detection::clear()

AutoIt:
    VectorOfVectorOfFull_object_detection.clear() -> None

void VectorOfVectorOfFull_object_detection::push_vector( VectorOfVectorOfFull_object_detection other )

AutoIt:
    VectorOfVectorOfFull_object_detection.push_vector( $other ) -> None

void VectorOfVectorOfFull_object_detection::push_vector( VectorOfVectorOfFull_object_detection other
                                                         size_t                                count
                                                         size_t                                start = 0 )

AutoIt:
    VectorOfVectorOfFull_object_detection.push_vector( $other, $count[, $start] ) -> None

VectorOfVectorOfFull_object_detection VectorOfVectorOfFull_object_detection::slice( size_t start = 0
                                                                                    size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVectorOfFull_object_detection.slice( [$start[, $count]] ) -> retval

void VectorOfVectorOfFull_object_detection::sort( void*  comparator
                                                  size_t start = 0
                                                  size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVectorOfFull_object_detection.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfVectorOfFull_object_detection::sort_variant( void*  comparator
                                                          size_t start = 0
                                                          size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVectorOfFull_object_detection.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfVectorOfFull_object_detection::start()

AutoIt:
    VectorOfVectorOfFull_object_detection.start() -> retval

void* VectorOfVectorOfFull_object_detection::end()

AutoIt:
    VectorOfVectorOfFull_object_detection.end() -> retval

std::vector<dlib::full_object_detection> VectorOfVectorOfFull_object_detection::get_Item( size_t vIndex )

AutoIt:
    VectorOfVectorOfFull_object_detection.Item( $vIndex ) -> retval
    VectorOfVectorOfFull_object_detection( $vIndex ) -> retval

void VectorOfVectorOfFull_object_detection::put_Item( size_t                                   vIndex
                                                      std::vector<dlib::full_object_detection> vItem )

AutoIt:
    VectorOfVectorOfFull_object_detection.Item( $vIndex ) = $vItem

VectorOfVectorOfRectangle VectorOfVectorOfRectangle::create()

AutoIt:
    VectorOfVectorOfRectangle.create() -> <VectorOfVectorOfRectangle object>

VectorOfVectorOfRectangle VectorOfVectorOfRectangle::create( size_t size )

AutoIt:
    VectorOfVectorOfRectangle.create( $size ) -> <VectorOfVectorOfRectangle object>

VectorOfVectorOfRectangle VectorOfVectorOfRectangle::create( VectorOfVectorOfRectangle other )

AutoIt:
    VectorOfVectorOfRectangle.create( $other ) -> <VectorOfVectorOfRectangle object>

std::vector<int> VectorOfVectorOfRectangle::Keys()

AutoIt:
    VectorOfVectorOfRectangle.Keys() -> retval

VectorOfVectorOfRectangle VectorOfVectorOfRectangle::Items()

AutoIt:
    VectorOfVectorOfRectangle.Items() -> retval

void VectorOfVectorOfRectangle::push_back( std::vector<dlib::rectangle> value )

AutoIt:
    VectorOfVectorOfRectangle.push_back( $value ) -> None

void VectorOfVectorOfRectangle::Add( std::vector<dlib::rectangle> value )

AutoIt:
    VectorOfVectorOfRectangle.Add( $value ) -> None

void VectorOfVectorOfRectangle::Remove( size_t index )

AutoIt:
    VectorOfVectorOfRectangle.Remove( $index ) -> None

std::vector<dlib::rectangle> VectorOfVectorOfRectangle::at( size_t index )

AutoIt:
    VectorOfVectorOfRectangle.at( $index ) -> retval

void VectorOfVectorOfRectangle::at( size_t                       index
                                    std::vector<dlib::rectangle> value )

AutoIt:
    VectorOfVectorOfRectangle.at( $index, $value ) -> None

size_t VectorOfVectorOfRectangle::size()

AutoIt:
    VectorOfVectorOfRectangle.size() -> retval

bool VectorOfVectorOfRectangle::empty()

AutoIt:
    VectorOfVectorOfRectangle.empty() -> retval

void VectorOfVectorOfRectangle::clear()

AutoIt:
    VectorOfVectorOfRectangle.clear() -> None

void VectorOfVectorOfRectangle::push_vector( VectorOfVectorOfRectangle other )

AutoIt:
    VectorOfVectorOfRectangle.push_vector( $other ) -> None

void VectorOfVectorOfRectangle::push_vector( VectorOfVectorOfRectangle other
                                             size_t                    count
                                             size_t                    start = 0 )

AutoIt:
    VectorOfVectorOfRectangle.push_vector( $other, $count[, $start] ) -> None

VectorOfVectorOfRectangle VectorOfVectorOfRectangle::slice( size_t start = 0
                                                            size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVectorOfRectangle.slice( [$start[, $count]] ) -> retval

void VectorOfVectorOfRectangle::sort( void*  comparator
                                      size_t start = 0
                                      size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVectorOfRectangle.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfVectorOfRectangle::sort_variant( void*  comparator
                                              size_t start = 0
                                              size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVectorOfRectangle.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfVectorOfRectangle::start()

AutoIt:
    VectorOfVectorOfRectangle.start() -> retval

void* VectorOfVectorOfRectangle::end()

AutoIt:
    VectorOfVectorOfRectangle.end() -> retval

std::vector<dlib::rectangle> VectorOfVectorOfRectangle::get_Item( size_t vIndex )

AutoIt:
    VectorOfVectorOfRectangle.Item( $vIndex ) -> retval
    VectorOfVectorOfRectangle( $vIndex ) -> retval

void VectorOfVectorOfRectangle::put_Item( size_t                       vIndex
                                          std::vector<dlib::rectangle> vItem )

AutoIt:
    VectorOfVectorOfRectangle.Item( $vIndex ) = $vItem

VectorOfVec_ranking_pair VectorOfVec_ranking_pair::create()

AutoIt:
    VectorOfVec_ranking_pair.create() -> <VectorOfVec_ranking_pair object>

VectorOfVec_ranking_pair VectorOfVec_ranking_pair::create( size_t size )

AutoIt:
    VectorOfVec_ranking_pair.create( $size ) -> <VectorOfVec_ranking_pair object>

VectorOfVec_ranking_pair VectorOfVec_ranking_pair::create( VectorOfVec_ranking_pair other )

AutoIt:
    VectorOfVec_ranking_pair.create( $other ) -> <VectorOfVec_ranking_pair object>

std::vector<int> VectorOfVec_ranking_pair::Keys()

AutoIt:
    VectorOfVec_ranking_pair.Keys() -> retval

VectorOfVec_ranking_pair VectorOfVec_ranking_pair::Items()

AutoIt:
    VectorOfVec_ranking_pair.Items() -> retval

void VectorOfVec_ranking_pair::push_back( dlib::vec_ranking_pair value )

AutoIt:
    VectorOfVec_ranking_pair.push_back( $value ) -> None

void VectorOfVec_ranking_pair::Add( dlib::vec_ranking_pair value )

AutoIt:
    VectorOfVec_ranking_pair.Add( $value ) -> None

void VectorOfVec_ranking_pair::Remove( size_t index )

AutoIt:
    VectorOfVec_ranking_pair.Remove( $index ) -> None

dlib::vec_ranking_pair VectorOfVec_ranking_pair::at( size_t index )

AutoIt:
    VectorOfVec_ranking_pair.at( $index ) -> retval

void VectorOfVec_ranking_pair::at( size_t                 index
                                   dlib::vec_ranking_pair value )

AutoIt:
    VectorOfVec_ranking_pair.at( $index, $value ) -> None

size_t VectorOfVec_ranking_pair::size()

AutoIt:
    VectorOfVec_ranking_pair.size() -> retval

bool VectorOfVec_ranking_pair::empty()

AutoIt:
    VectorOfVec_ranking_pair.empty() -> retval

void VectorOfVec_ranking_pair::clear()

AutoIt:
    VectorOfVec_ranking_pair.clear() -> None

void VectorOfVec_ranking_pair::push_vector( VectorOfVec_ranking_pair other )

AutoIt:
    VectorOfVec_ranking_pair.push_vector( $other ) -> None

void VectorOfVec_ranking_pair::push_vector( VectorOfVec_ranking_pair other
                                            size_t                   count
                                            size_t                   start = 0 )

AutoIt:
    VectorOfVec_ranking_pair.push_vector( $other, $count[, $start] ) -> None

VectorOfVec_ranking_pair VectorOfVec_ranking_pair::slice( size_t start = 0
                                                          size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVec_ranking_pair.slice( [$start[, $count]] ) -> retval

void VectorOfVec_ranking_pair::sort( void*  comparator
                                     size_t start = 0
                                     size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVec_ranking_pair.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfVec_ranking_pair::sort_variant( void*  comparator
                                             size_t start = 0
                                             size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVec_ranking_pair.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfVec_ranking_pair::start()

AutoIt:
    VectorOfVec_ranking_pair.start() -> retval

void* VectorOfVec_ranking_pair::end()

AutoIt:
    VectorOfVec_ranking_pair.end() -> retval

dlib::vec_ranking_pair VectorOfVec_ranking_pair::get_Item( size_t vIndex )

AutoIt:
    VectorOfVec_ranking_pair.Item( $vIndex ) -> retval
    VectorOfVec_ranking_pair( $vIndex ) -> retval

void VectorOfVec_ranking_pair::put_Item( size_t                 vIndex
                                         dlib::vec_ranking_pair vItem )

AutoIt:
    VectorOfVec_ranking_pair.Item( $vIndex ) = $vItem

VectorOfSparse_ranking_pair VectorOfSparse_ranking_pair::create()

AutoIt:
    VectorOfSparse_ranking_pair.create() -> <VectorOfSparse_ranking_pair object>

VectorOfSparse_ranking_pair VectorOfSparse_ranking_pair::create( size_t size )

AutoIt:
    VectorOfSparse_ranking_pair.create( $size ) -> <VectorOfSparse_ranking_pair object>

VectorOfSparse_ranking_pair VectorOfSparse_ranking_pair::create( VectorOfSparse_ranking_pair other )

AutoIt:
    VectorOfSparse_ranking_pair.create( $other ) -> <VectorOfSparse_ranking_pair object>

std::vector<int> VectorOfSparse_ranking_pair::Keys()

AutoIt:
    VectorOfSparse_ranking_pair.Keys() -> retval

VectorOfSparse_ranking_pair VectorOfSparse_ranking_pair::Items()

AutoIt:
    VectorOfSparse_ranking_pair.Items() -> retval

void VectorOfSparse_ranking_pair::push_back( dlib::sparse_ranking_pair value )

AutoIt:
    VectorOfSparse_ranking_pair.push_back( $value ) -> None

void VectorOfSparse_ranking_pair::Add( dlib::sparse_ranking_pair value )

AutoIt:
    VectorOfSparse_ranking_pair.Add( $value ) -> None

void VectorOfSparse_ranking_pair::Remove( size_t index )

AutoIt:
    VectorOfSparse_ranking_pair.Remove( $index ) -> None

dlib::sparse_ranking_pair VectorOfSparse_ranking_pair::at( size_t index )

AutoIt:
    VectorOfSparse_ranking_pair.at( $index ) -> retval

void VectorOfSparse_ranking_pair::at( size_t                    index
                                      dlib::sparse_ranking_pair value )

AutoIt:
    VectorOfSparse_ranking_pair.at( $index, $value ) -> None

size_t VectorOfSparse_ranking_pair::size()

AutoIt:
    VectorOfSparse_ranking_pair.size() -> retval

bool VectorOfSparse_ranking_pair::empty()

AutoIt:
    VectorOfSparse_ranking_pair.empty() -> retval

void VectorOfSparse_ranking_pair::clear()

AutoIt:
    VectorOfSparse_ranking_pair.clear() -> None

void VectorOfSparse_ranking_pair::push_vector( VectorOfSparse_ranking_pair other )

AutoIt:
    VectorOfSparse_ranking_pair.push_vector( $other ) -> None

void VectorOfSparse_ranking_pair::push_vector( VectorOfSparse_ranking_pair other
                                               size_t                      count
                                               size_t                      start = 0 )

AutoIt:
    VectorOfSparse_ranking_pair.push_vector( $other, $count[, $start] ) -> None

VectorOfSparse_ranking_pair VectorOfSparse_ranking_pair::slice( size_t start = 0
                                                                size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfSparse_ranking_pair.slice( [$start[, $count]] ) -> retval

void VectorOfSparse_ranking_pair::sort( void*  comparator
                                        size_t start = 0
                                        size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfSparse_ranking_pair.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfSparse_ranking_pair::sort_variant( void*  comparator
                                                size_t start = 0
                                                size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfSparse_ranking_pair.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfSparse_ranking_pair::start()

AutoIt:
    VectorOfSparse_ranking_pair.start() -> retval

void* VectorOfSparse_ranking_pair::end()

AutoIt:
    VectorOfSparse_ranking_pair.end() -> retval

dlib::sparse_ranking_pair VectorOfSparse_ranking_pair::get_Item( size_t vIndex )

AutoIt:
    VectorOfSparse_ranking_pair.Item( $vIndex ) -> retval
    VectorOfSparse_ranking_pair( $vIndex ) -> retval

void VectorOfSparse_ranking_pair::put_Item( size_t                    vIndex
                                            dlib::sparse_ranking_pair vItem )

AutoIt:
    VectorOfSparse_ranking_pair.Item( $vIndex ) = $vItem

VectorOfDpoint VectorOfDpoint::create()

AutoIt:
    VectorOfDpoint.create() -> <VectorOfDpoint object>

VectorOfDpoint VectorOfDpoint::create( size_t size )

AutoIt:
    VectorOfDpoint.create( $size ) -> <VectorOfDpoint object>

VectorOfDpoint VectorOfDpoint::create( VectorOfDpoint other )

AutoIt:
    VectorOfDpoint.create( $other ) -> <VectorOfDpoint object>

std::vector<int> VectorOfDpoint::Keys()

AutoIt:
    VectorOfDpoint.Keys() -> retval

VectorOfDpoint VectorOfDpoint::Items()

AutoIt:
    VectorOfDpoint.Items() -> retval

void VectorOfDpoint::push_back( dlib::dpoint value )

AutoIt:
    VectorOfDpoint.push_back( $value ) -> None

void VectorOfDpoint::Add( dlib::dpoint value )

AutoIt:
    VectorOfDpoint.Add( $value ) -> None

void VectorOfDpoint::Remove( size_t index )

AutoIt:
    VectorOfDpoint.Remove( $index ) -> None

dlib::dpoint VectorOfDpoint::at( size_t index )

AutoIt:
    VectorOfDpoint.at( $index ) -> retval

void VectorOfDpoint::at( size_t       index
                         dlib::dpoint value )

AutoIt:
    VectorOfDpoint.at( $index, $value ) -> None

size_t VectorOfDpoint::size()

AutoIt:
    VectorOfDpoint.size() -> retval

bool VectorOfDpoint::empty()

AutoIt:
    VectorOfDpoint.empty() -> retval

void VectorOfDpoint::clear()

AutoIt:
    VectorOfDpoint.clear() -> None

void VectorOfDpoint::push_vector( VectorOfDpoint other )

AutoIt:
    VectorOfDpoint.push_vector( $other ) -> None

void VectorOfDpoint::push_vector( VectorOfDpoint other
                                  size_t         count
                                  size_t         start = 0 )

AutoIt:
    VectorOfDpoint.push_vector( $other, $count[, $start] ) -> None

VectorOfDpoint VectorOfDpoint::slice( size_t start = 0
                                      size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfDpoint.slice( [$start[, $count]] ) -> retval

void VectorOfDpoint::sort( void*  comparator
                           size_t start = 0
                           size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfDpoint.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfDpoint::sort_variant( void*  comparator
                                   size_t start = 0
                                   size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfDpoint.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfDpoint::start()

AutoIt:
    VectorOfDpoint.start() -> retval

void* VectorOfDpoint::end()

AutoIt:
    VectorOfDpoint.end() -> retval

dlib::dpoint VectorOfDpoint::get_Item( size_t vIndex )

AutoIt:
    VectorOfDpoint.Item( $vIndex ) -> retval
    VectorOfDpoint( $vIndex ) -> retval

void VectorOfDpoint::put_Item( size_t       vIndex
                               dlib::dpoint vItem )

AutoIt:
    VectorOfDpoint.Item( $vIndex ) = $vItem

VectorOfPoint VectorOfPoint::create()

AutoIt:
    VectorOfPoint.create() -> <VectorOfPoint object>

VectorOfPoint VectorOfPoint::create( size_t size )

AutoIt:
    VectorOfPoint.create( $size ) -> <VectorOfPoint object>

VectorOfPoint VectorOfPoint::create( VectorOfPoint other )

AutoIt:
    VectorOfPoint.create( $other ) -> <VectorOfPoint object>

std::vector<int> VectorOfPoint::Keys()

AutoIt:
    VectorOfPoint.Keys() -> retval

VectorOfPoint VectorOfPoint::Items()

AutoIt:
    VectorOfPoint.Items() -> retval

void VectorOfPoint::push_back( dlib::point value )

AutoIt:
    VectorOfPoint.push_back( $value ) -> None

void VectorOfPoint::Add( dlib::point value )

AutoIt:
    VectorOfPoint.Add( $value ) -> None

void VectorOfPoint::Remove( size_t index )

AutoIt:
    VectorOfPoint.Remove( $index ) -> None

dlib::point VectorOfPoint::at( size_t index )

AutoIt:
    VectorOfPoint.at( $index ) -> retval

void VectorOfPoint::at( size_t      index
                        dlib::point value )

AutoIt:
    VectorOfPoint.at( $index, $value ) -> None

size_t VectorOfPoint::size()

AutoIt:
    VectorOfPoint.size() -> retval

bool VectorOfPoint::empty()

AutoIt:
    VectorOfPoint.empty() -> retval

void VectorOfPoint::clear()

AutoIt:
    VectorOfPoint.clear() -> None

void VectorOfPoint::push_vector( VectorOfPoint other )

AutoIt:
    VectorOfPoint.push_vector( $other ) -> None

void VectorOfPoint::push_vector( VectorOfPoint other
                                 size_t        count
                                 size_t        start = 0 )

AutoIt:
    VectorOfPoint.push_vector( $other, $count[, $start] ) -> None

VectorOfPoint VectorOfPoint::slice( size_t start = 0
                                    size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfPoint.slice( [$start[, $count]] ) -> retval

void VectorOfPoint::sort( void*  comparator
                          size_t start = 0
                          size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfPoint.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfPoint::sort_variant( void*  comparator
                                  size_t start = 0
                                  size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfPoint.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfPoint::start()

AutoIt:
    VectorOfPoint.start() -> retval

void* VectorOfPoint::end()

AutoIt:
    VectorOfPoint.end() -> retval

dlib::point VectorOfPoint::get_Item( size_t vIndex )

AutoIt:
    VectorOfPoint.Item( $vIndex ) -> retval
    VectorOfPoint( $vIndex ) -> retval

void VectorOfPoint::put_Item( size_t      vIndex
                              dlib::point vItem )

AutoIt:
    VectorOfPoint.Item( $vIndex ) = $vItem

VectorOfVectorOfDouble VectorOfVectorOfDouble::create()

AutoIt:
    VectorOfVectorOfDouble.create() -> <VectorOfVectorOfDouble object>

VectorOfVectorOfDouble VectorOfVectorOfDouble::create( size_t size )

AutoIt:
    VectorOfVectorOfDouble.create( $size ) -> <VectorOfVectorOfDouble object>

VectorOfVectorOfDouble VectorOfVectorOfDouble::create( VectorOfVectorOfDouble other )

AutoIt:
    VectorOfVectorOfDouble.create( $other ) -> <VectorOfVectorOfDouble object>

std::vector<int> VectorOfVectorOfDouble::Keys()

AutoIt:
    VectorOfVectorOfDouble.Keys() -> retval

VectorOfVectorOfDouble VectorOfVectorOfDouble::Items()

AutoIt:
    VectorOfVectorOfDouble.Items() -> retval

void VectorOfVectorOfDouble::push_back( std::vector<double> value )

AutoIt:
    VectorOfVectorOfDouble.push_back( $value ) -> None

void VectorOfVectorOfDouble::Add( std::vector<double> value )

AutoIt:
    VectorOfVectorOfDouble.Add( $value ) -> None

void VectorOfVectorOfDouble::Remove( size_t index )

AutoIt:
    VectorOfVectorOfDouble.Remove( $index ) -> None

std::vector<double> VectorOfVectorOfDouble::at( size_t index )

AutoIt:
    VectorOfVectorOfDouble.at( $index ) -> retval

void VectorOfVectorOfDouble::at( size_t              index
                                 std::vector<double> value )

AutoIt:
    VectorOfVectorOfDouble.at( $index, $value ) -> None

size_t VectorOfVectorOfDouble::size()

AutoIt:
    VectorOfVectorOfDouble.size() -> retval

bool VectorOfVectorOfDouble::empty()

AutoIt:
    VectorOfVectorOfDouble.empty() -> retval

void VectorOfVectorOfDouble::clear()

AutoIt:
    VectorOfVectorOfDouble.clear() -> None

void VectorOfVectorOfDouble::push_vector( VectorOfVectorOfDouble other )

AutoIt:
    VectorOfVectorOfDouble.push_vector( $other ) -> None

void VectorOfVectorOfDouble::push_vector( VectorOfVectorOfDouble other
                                          size_t                 count
                                          size_t                 start = 0 )

AutoIt:
    VectorOfVectorOfDouble.push_vector( $other, $count[, $start] ) -> None

VectorOfVectorOfDouble VectorOfVectorOfDouble::slice( size_t start = 0
                                                      size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVectorOfDouble.slice( [$start[, $count]] ) -> retval

void VectorOfVectorOfDouble::sort( void*  comparator
                                   size_t start = 0
                                   size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVectorOfDouble.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfVectorOfDouble::sort_variant( void*  comparator
                                           size_t start = 0
                                           size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVectorOfDouble.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfVectorOfDouble::start()

AutoIt:
    VectorOfVectorOfDouble.start() -> retval

void* VectorOfVectorOfDouble::end()

AutoIt:
    VectorOfVectorOfDouble.end() -> retval

std::vector<double> VectorOfVectorOfDouble::get_Item( size_t vIndex )

AutoIt:
    VectorOfVectorOfDouble.Item( $vIndex ) -> retval
    VectorOfVectorOfDouble( $vIndex ) -> retval

void VectorOfVectorOfDouble::put_Item( size_t              vIndex
                                       std::vector<double> vItem )

AutoIt:
    VectorOfVectorOfDouble.Item( $vIndex ) = $vItem

VectorOfMmod_rect VectorOfMmod_rect::create()

AutoIt:
    VectorOfMmod_rect.create() -> <VectorOfMmod_rect object>

VectorOfMmod_rect VectorOfMmod_rect::create( size_t size )

AutoIt:
    VectorOfMmod_rect.create( $size ) -> <VectorOfMmod_rect object>

VectorOfMmod_rect VectorOfMmod_rect::create( VectorOfMmod_rect other )

AutoIt:
    VectorOfMmod_rect.create( $other ) -> <VectorOfMmod_rect object>

std::vector<int> VectorOfMmod_rect::Keys()

AutoIt:
    VectorOfMmod_rect.Keys() -> retval

VectorOfMmod_rect VectorOfMmod_rect::Items()

AutoIt:
    VectorOfMmod_rect.Items() -> retval

void VectorOfMmod_rect::push_back( dlib::mmod_rect value )

AutoIt:
    VectorOfMmod_rect.push_back( $value ) -> None

void VectorOfMmod_rect::Add( dlib::mmod_rect value )

AutoIt:
    VectorOfMmod_rect.Add( $value ) -> None

void VectorOfMmod_rect::Remove( size_t index )

AutoIt:
    VectorOfMmod_rect.Remove( $index ) -> None

dlib::mmod_rect VectorOfMmod_rect::at( size_t index )

AutoIt:
    VectorOfMmod_rect.at( $index ) -> retval

void VectorOfMmod_rect::at( size_t          index
                            dlib::mmod_rect value )

AutoIt:
    VectorOfMmod_rect.at( $index, $value ) -> None

size_t VectorOfMmod_rect::size()

AutoIt:
    VectorOfMmod_rect.size() -> retval

bool VectorOfMmod_rect::empty()

AutoIt:
    VectorOfMmod_rect.empty() -> retval

void VectorOfMmod_rect::clear()

AutoIt:
    VectorOfMmod_rect.clear() -> None

void VectorOfMmod_rect::push_vector( VectorOfMmod_rect other )

AutoIt:
    VectorOfMmod_rect.push_vector( $other ) -> None

void VectorOfMmod_rect::push_vector( VectorOfMmod_rect other
                                     size_t            count
                                     size_t            start = 0 )

AutoIt:
    VectorOfMmod_rect.push_vector( $other, $count[, $start] ) -> None

VectorOfMmod_rect VectorOfMmod_rect::slice( size_t start = 0
                                            size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfMmod_rect.slice( [$start[, $count]] ) -> retval

void VectorOfMmod_rect::sort( void*  comparator
                              size_t start = 0
                              size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfMmod_rect.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfMmod_rect::sort_variant( void*  comparator
                                      size_t start = 0
                                      size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfMmod_rect.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfMmod_rect::start()

AutoIt:
    VectorOfMmod_rect.start() -> retval

void* VectorOfMmod_rect::end()

AutoIt:
    VectorOfMmod_rect.end() -> retval

dlib::mmod_rect VectorOfMmod_rect::get_Item( size_t vIndex )

AutoIt:
    VectorOfMmod_rect.Item( $vIndex ) -> retval
    VectorOfMmod_rect( $vIndex ) -> retval

void VectorOfMmod_rect::put_Item( size_t          vIndex
                                  dlib::mmod_rect vItem )

AutoIt:
    VectorOfMmod_rect.Item( $vIndex ) = $vItem

VectorOfVectorOfMmod_rect VectorOfVectorOfMmod_rect::create()

AutoIt:
    VectorOfVectorOfMmod_rect.create() -> <VectorOfVectorOfMmod_rect object>

VectorOfVectorOfMmod_rect VectorOfVectorOfMmod_rect::create( size_t size )

AutoIt:
    VectorOfVectorOfMmod_rect.create( $size ) -> <VectorOfVectorOfMmod_rect object>

VectorOfVectorOfMmod_rect VectorOfVectorOfMmod_rect::create( VectorOfVectorOfMmod_rect other )

AutoIt:
    VectorOfVectorOfMmod_rect.create( $other ) -> <VectorOfVectorOfMmod_rect object>

std::vector<int> VectorOfVectorOfMmod_rect::Keys()

AutoIt:
    VectorOfVectorOfMmod_rect.Keys() -> retval

VectorOfVectorOfMmod_rect VectorOfVectorOfMmod_rect::Items()

AutoIt:
    VectorOfVectorOfMmod_rect.Items() -> retval

void VectorOfVectorOfMmod_rect::push_back( std::vector<dlib::mmod_rect> value )

AutoIt:
    VectorOfVectorOfMmod_rect.push_back( $value ) -> None

void VectorOfVectorOfMmod_rect::Add( std::vector<dlib::mmod_rect> value )

AutoIt:
    VectorOfVectorOfMmod_rect.Add( $value ) -> None

void VectorOfVectorOfMmod_rect::Remove( size_t index )

AutoIt:
    VectorOfVectorOfMmod_rect.Remove( $index ) -> None

std::vector<dlib::mmod_rect> VectorOfVectorOfMmod_rect::at( size_t index )

AutoIt:
    VectorOfVectorOfMmod_rect.at( $index ) -> retval

void VectorOfVectorOfMmod_rect::at( size_t                       index
                                    std::vector<dlib::mmod_rect> value )

AutoIt:
    VectorOfVectorOfMmod_rect.at( $index, $value ) -> None

size_t VectorOfVectorOfMmod_rect::size()

AutoIt:
    VectorOfVectorOfMmod_rect.size() -> retval

bool VectorOfVectorOfMmod_rect::empty()

AutoIt:
    VectorOfVectorOfMmod_rect.empty() -> retval

void VectorOfVectorOfMmod_rect::clear()

AutoIt:
    VectorOfVectorOfMmod_rect.clear() -> None

void VectorOfVectorOfMmod_rect::push_vector( VectorOfVectorOfMmod_rect other )

AutoIt:
    VectorOfVectorOfMmod_rect.push_vector( $other ) -> None

void VectorOfVectorOfMmod_rect::push_vector( VectorOfVectorOfMmod_rect other
                                             size_t                    count
                                             size_t                    start = 0 )

AutoIt:
    VectorOfVectorOfMmod_rect.push_vector( $other, $count[, $start] ) -> None

VectorOfVectorOfMmod_rect VectorOfVectorOfMmod_rect::slice( size_t start = 0
                                                            size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVectorOfMmod_rect.slice( [$start[, $count]] ) -> retval

void VectorOfVectorOfMmod_rect::sort( void*  comparator
                                      size_t start = 0
                                      size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVectorOfMmod_rect.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfVectorOfMmod_rect::sort_variant( void*  comparator
                                              size_t start = 0
                                              size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfVectorOfMmod_rect.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfVectorOfMmod_rect::start()

AutoIt:
    VectorOfVectorOfMmod_rect.start() -> retval

void* VectorOfVectorOfMmod_rect::end()

AutoIt:
    VectorOfVectorOfMmod_rect.end() -> retval

std::vector<dlib::mmod_rect> VectorOfVectorOfMmod_rect::get_Item( size_t vIndex )

AutoIt:
    VectorOfVectorOfMmod_rect.Item( $vIndex ) -> retval
    VectorOfVectorOfMmod_rect( $vIndex ) -> retval

void VectorOfVectorOfMmod_rect::put_Item( size_t                       vIndex
                                          std::vector<dlib::mmod_rect> vItem )

AutoIt:
    VectorOfVectorOfMmod_rect.Item( $vIndex ) = $vItem

VectorOfSimple_object_detector_com VectorOfSimple_object_detector_com::create()

AutoIt:
    VectorOfSimple_object_detector_com.create() -> <VectorOfSimple_object_detector_com object>

VectorOfSimple_object_detector_com VectorOfSimple_object_detector_com::create( size_t size )

AutoIt:
    VectorOfSimple_object_detector_com.create( $size ) -> <VectorOfSimple_object_detector_com object>

VectorOfSimple_object_detector_com VectorOfSimple_object_detector_com::create( VectorOfSimple_object_detector_com other )

AutoIt:
    VectorOfSimple_object_detector_com.create( $other ) -> <VectorOfSimple_object_detector_com object>

std::vector<int> VectorOfSimple_object_detector_com::Keys()

AutoIt:
    VectorOfSimple_object_detector_com.Keys() -> retval

VectorOfSimple_object_detector_com VectorOfSimple_object_detector_com::Items()

AutoIt:
    VectorOfSimple_object_detector_com.Items() -> retval

void VectorOfSimple_object_detector_com::push_back( dlib::simple_object_detector_com value )

AutoIt:
    VectorOfSimple_object_detector_com.push_back( $value ) -> None

void VectorOfSimple_object_detector_com::Add( dlib::simple_object_detector_com value )

AutoIt:
    VectorOfSimple_object_detector_com.Add( $value ) -> None

void VectorOfSimple_object_detector_com::Remove( size_t index )

AutoIt:
    VectorOfSimple_object_detector_com.Remove( $index ) -> None

dlib::simple_object_detector_com VectorOfSimple_object_detector_com::at( size_t index )

AutoIt:
    VectorOfSimple_object_detector_com.at( $index ) -> retval

void VectorOfSimple_object_detector_com::at( size_t                           index
                                             dlib::simple_object_detector_com value )

AutoIt:
    VectorOfSimple_object_detector_com.at( $index, $value ) -> None

size_t VectorOfSimple_object_detector_com::size()

AutoIt:
    VectorOfSimple_object_detector_com.size() -> retval

bool VectorOfSimple_object_detector_com::empty()

AutoIt:
    VectorOfSimple_object_detector_com.empty() -> retval

void VectorOfSimple_object_detector_com::clear()

AutoIt:
    VectorOfSimple_object_detector_com.clear() -> None

void VectorOfSimple_object_detector_com::push_vector( VectorOfSimple_object_detector_com other )

AutoIt:
    VectorOfSimple_object_detector_com.push_vector( $other ) -> None

void VectorOfSimple_object_detector_com::push_vector( VectorOfSimple_object_detector_com other
                                                      size_t                             count
                                                      size_t                             start = 0 )

AutoIt:
    VectorOfSimple_object_detector_com.push_vector( $other, $count[, $start] ) -> None

VectorOfSimple_object_detector_com VectorOfSimple_object_detector_com::slice( size_t start = 0
                                                                              size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfSimple_object_detector_com.slice( [$start[, $count]] ) -> retval

void VectorOfSimple_object_detector_com::sort( void*  comparator
                                               size_t start = 0
                                               size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfSimple_object_detector_com.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfSimple_object_detector_com::sort_variant( void*  comparator
                                                       size_t start = 0
                                                       size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfSimple_object_detector_com.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfSimple_object_detector_com::start()

AutoIt:
    VectorOfSimple_object_detector_com.start() -> retval

void* VectorOfSimple_object_detector_com::end()

AutoIt:
    VectorOfSimple_object_detector_com.end() -> retval

dlib::simple_object_detector_com VectorOfSimple_object_detector_com::get_Item( size_t vIndex )

AutoIt:
    VectorOfSimple_object_detector_com.Item( $vIndex ) -> retval
    VectorOfSimple_object_detector_com( $vIndex ) -> retval

void VectorOfSimple_object_detector_com::put_Item( size_t                           vIndex
                                                   dlib::simple_object_detector_com vItem )

AutoIt:
    VectorOfSimple_object_detector_com.Item( $vIndex ) = $vItem

VectorOfFhog_object_detector VectorOfFhog_object_detector::create()

AutoIt:
    VectorOfFhog_object_detector.create() -> <VectorOfFhog_object_detector object>

VectorOfFhog_object_detector VectorOfFhog_object_detector::create( size_t size )

AutoIt:
    VectorOfFhog_object_detector.create( $size ) -> <VectorOfFhog_object_detector object>

VectorOfFhog_object_detector VectorOfFhog_object_detector::create( VectorOfFhog_object_detector other )

AutoIt:
    VectorOfFhog_object_detector.create( $other ) -> <VectorOfFhog_object_detector object>

std::vector<int> VectorOfFhog_object_detector::Keys()

AutoIt:
    VectorOfFhog_object_detector.Keys() -> retval

VectorOfFhog_object_detector VectorOfFhog_object_detector::Items()

AutoIt:
    VectorOfFhog_object_detector.Items() -> retval

void VectorOfFhog_object_detector::push_back( dlib::fhog_object_detector value )

AutoIt:
    VectorOfFhog_object_detector.push_back( $value ) -> None

void VectorOfFhog_object_detector::Add( dlib::fhog_object_detector value )

AutoIt:
    VectorOfFhog_object_detector.Add( $value ) -> None

void VectorOfFhog_object_detector::Remove( size_t index )

AutoIt:
    VectorOfFhog_object_detector.Remove( $index ) -> None

dlib::fhog_object_detector VectorOfFhog_object_detector::at( size_t index )

AutoIt:
    VectorOfFhog_object_detector.at( $index ) -> retval

void VectorOfFhog_object_detector::at( size_t                     index
                                       dlib::fhog_object_detector value )

AutoIt:
    VectorOfFhog_object_detector.at( $index, $value ) -> None

size_t VectorOfFhog_object_detector::size()

AutoIt:
    VectorOfFhog_object_detector.size() -> retval

bool VectorOfFhog_object_detector::empty()

AutoIt:
    VectorOfFhog_object_detector.empty() -> retval

void VectorOfFhog_object_detector::clear()

AutoIt:
    VectorOfFhog_object_detector.clear() -> None

void VectorOfFhog_object_detector::push_vector( VectorOfFhog_object_detector other )

AutoIt:
    VectorOfFhog_object_detector.push_vector( $other ) -> None

void VectorOfFhog_object_detector::push_vector( VectorOfFhog_object_detector other
                                                size_t                       count
                                                size_t                       start = 0 )

AutoIt:
    VectorOfFhog_object_detector.push_vector( $other, $count[, $start] ) -> None

VectorOfFhog_object_detector VectorOfFhog_object_detector::slice( size_t start = 0
                                                                  size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfFhog_object_detector.slice( [$start[, $count]] ) -> retval

void VectorOfFhog_object_detector::sort( void*  comparator
                                         size_t start = 0
                                         size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfFhog_object_detector.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfFhog_object_detector::sort_variant( void*  comparator
                                                 size_t start = 0
                                                 size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfFhog_object_detector.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfFhog_object_detector::start()

AutoIt:
    VectorOfFhog_object_detector.start() -> retval

void* VectorOfFhog_object_detector::end()

AutoIt:
    VectorOfFhog_object_detector.end() -> retval

dlib::fhog_object_detector VectorOfFhog_object_detector::get_Item( size_t vIndex )

AutoIt:
    VectorOfFhog_object_detector.Item( $vIndex ) -> retval
    VectorOfFhog_object_detector( $vIndex ) -> retval

void VectorOfFhog_object_detector::put_Item( size_t                     vIndex
                                             dlib::fhog_object_detector vItem )

AutoIt:
    VectorOfFhog_object_detector.Item( $vIndex ) = $vItem

VectorOfDrectangle VectorOfDrectangle::create()

AutoIt:
    VectorOfDrectangle.create() -> <VectorOfDrectangle object>

VectorOfDrectangle VectorOfDrectangle::create( size_t size )

AutoIt:
    VectorOfDrectangle.create( $size ) -> <VectorOfDrectangle object>

VectorOfDrectangle VectorOfDrectangle::create( VectorOfDrectangle other )

AutoIt:
    VectorOfDrectangle.create( $other ) -> <VectorOfDrectangle object>

std::vector<int> VectorOfDrectangle::Keys()

AutoIt:
    VectorOfDrectangle.Keys() -> retval

VectorOfDrectangle VectorOfDrectangle::Items()

AutoIt:
    VectorOfDrectangle.Items() -> retval

void VectorOfDrectangle::push_back( dlib::drectangle value )

AutoIt:
    VectorOfDrectangle.push_back( $value ) -> None

void VectorOfDrectangle::Add( dlib::drectangle value )

AutoIt:
    VectorOfDrectangle.Add( $value ) -> None

void VectorOfDrectangle::Remove( size_t index )

AutoIt:
    VectorOfDrectangle.Remove( $index ) -> None

dlib::drectangle VectorOfDrectangle::at( size_t index )

AutoIt:
    VectorOfDrectangle.at( $index ) -> retval

void VectorOfDrectangle::at( size_t           index
                             dlib::drectangle value )

AutoIt:
    VectorOfDrectangle.at( $index, $value ) -> None

size_t VectorOfDrectangle::size()

AutoIt:
    VectorOfDrectangle.size() -> retval

bool VectorOfDrectangle::empty()

AutoIt:
    VectorOfDrectangle.empty() -> retval

void VectorOfDrectangle::clear()

AutoIt:
    VectorOfDrectangle.clear() -> None

void VectorOfDrectangle::push_vector( VectorOfDrectangle other )

AutoIt:
    VectorOfDrectangle.push_vector( $other ) -> None

void VectorOfDrectangle::push_vector( VectorOfDrectangle other
                                      size_t             count
                                      size_t             start = 0 )

AutoIt:
    VectorOfDrectangle.push_vector( $other, $count[, $start] ) -> None

VectorOfDrectangle VectorOfDrectangle::slice( size_t start = 0
                                              size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfDrectangle.slice( [$start[, $count]] ) -> retval

void VectorOfDrectangle::sort( void*  comparator
                               size_t start = 0
                               size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfDrectangle.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfDrectangle::sort_variant( void*  comparator
                                       size_t start = 0
                                       size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfDrectangle.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfDrectangle::start()

AutoIt:
    VectorOfDrectangle.start() -> retval

void* VectorOfDrectangle::end()

AutoIt:
    VectorOfDrectangle.end() -> retval

dlib::drectangle VectorOfDrectangle::get_Item( size_t vIndex )

AutoIt:
    VectorOfDrectangle.Item( $vIndex ) -> retval
    VectorOfDrectangle( $vIndex ) -> retval

void VectorOfDrectangle::put_Item( size_t           vIndex
                                   dlib::drectangle vItem )

AutoIt:
    VectorOfDrectangle.Item( $vIndex ) = $vItem

VectorOfInt VectorOfInt::create()

AutoIt:
    VectorOfInt.create() -> <VectorOfInt object>

VectorOfInt VectorOfInt::create( size_t size )

AutoIt:
    VectorOfInt.create( $size ) -> <VectorOfInt object>

VectorOfInt VectorOfInt::create( VectorOfInt other )

AutoIt:
    VectorOfInt.create( $other ) -> <VectorOfInt object>

std::vector<int> VectorOfInt::Keys()

AutoIt:
    VectorOfInt.Keys() -> retval

VectorOfInt VectorOfInt::Items()

AutoIt:
    VectorOfInt.Items() -> retval

void VectorOfInt::push_back( int value )

AutoIt:
    VectorOfInt.push_back( $value ) -> None

void VectorOfInt::Add( int value )

AutoIt:
    VectorOfInt.Add( $value ) -> None

void VectorOfInt::Remove( size_t index )

AutoIt:
    VectorOfInt.Remove( $index ) -> None

int VectorOfInt::at( size_t index )

AutoIt:
    VectorOfInt.at( $index ) -> retval

void VectorOfInt::at( size_t index
                      int    value )

AutoIt:
    VectorOfInt.at( $index, $value ) -> None

size_t VectorOfInt::size()

AutoIt:
    VectorOfInt.size() -> retval

bool VectorOfInt::empty()

AutoIt:
    VectorOfInt.empty() -> retval

void VectorOfInt::clear()

AutoIt:
    VectorOfInt.clear() -> None

void VectorOfInt::push_vector( VectorOfInt other )

AutoIt:
    VectorOfInt.push_vector( $other ) -> None

void VectorOfInt::push_vector( VectorOfInt other
                               size_t      count
                               size_t      start = 0 )

AutoIt:
    VectorOfInt.push_vector( $other, $count[, $start] ) -> None

VectorOfInt VectorOfInt::slice( size_t start = 0
                                size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfInt.slice( [$start[, $count]] ) -> retval

void VectorOfInt::sort( void*  comparator
                        size_t start = 0
                        size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfInt.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfInt::sort_variant( void*  comparator
                                size_t start = 0
                                size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfInt.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfInt::start()

AutoIt:
    VectorOfInt.start() -> retval

void* VectorOfInt::end()

AutoIt:
    VectorOfInt.end() -> retval

int VectorOfInt::get_Item( size_t vIndex )

AutoIt:
    VectorOfInt.Item( $vIndex ) -> retval
    VectorOfInt( $vIndex ) -> retval

void VectorOfInt::put_Item( size_t vIndex
                            int    vItem )

AutoIt:
    VectorOfInt.Item( $vIndex ) = $vItem

VectorOfUchar VectorOfUchar::create()

AutoIt:
    VectorOfUchar.create() -> <VectorOfUchar object>

VectorOfUchar VectorOfUchar::create( size_t size )

AutoIt:
    VectorOfUchar.create( $size ) -> <VectorOfUchar object>

VectorOfUchar VectorOfUchar::create( VectorOfUchar other )

AutoIt:
    VectorOfUchar.create( $other ) -> <VectorOfUchar object>

std::vector<int> VectorOfUchar::Keys()

AutoIt:
    VectorOfUchar.Keys() -> retval

VectorOfUchar VectorOfUchar::Items()

AutoIt:
    VectorOfUchar.Items() -> retval

void VectorOfUchar::push_back( uchar value )

AutoIt:
    VectorOfUchar.push_back( $value ) -> None

void VectorOfUchar::Add( uchar value )

AutoIt:
    VectorOfUchar.Add( $value ) -> None

void VectorOfUchar::Remove( size_t index )

AutoIt:
    VectorOfUchar.Remove( $index ) -> None

uchar VectorOfUchar::at( size_t index )

AutoIt:
    VectorOfUchar.at( $index ) -> retval

void VectorOfUchar::at( size_t index
                        uchar  value )

AutoIt:
    VectorOfUchar.at( $index, $value ) -> None

size_t VectorOfUchar::size()

AutoIt:
    VectorOfUchar.size() -> retval

bool VectorOfUchar::empty()

AutoIt:
    VectorOfUchar.empty() -> retval

void VectorOfUchar::clear()

AutoIt:
    VectorOfUchar.clear() -> None

void VectorOfUchar::push_vector( VectorOfUchar other )

AutoIt:
    VectorOfUchar.push_vector( $other ) -> None

void VectorOfUchar::push_vector( VectorOfUchar other
                                 size_t        count
                                 size_t        start = 0 )

AutoIt:
    VectorOfUchar.push_vector( $other, $count[, $start] ) -> None

VectorOfUchar VectorOfUchar::slice( size_t start = 0
                                    size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfUchar.slice( [$start[, $count]] ) -> retval

void VectorOfUchar::sort( void*  comparator
                          size_t start = 0
                          size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfUchar.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfUchar::sort_variant( void*  comparator
                                  size_t start = 0
                                  size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfUchar.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfUchar::start()

AutoIt:
    VectorOfUchar.start() -> retval

void* VectorOfUchar::end()

AutoIt:
    VectorOfUchar.end() -> retval

uchar VectorOfUchar::get_Item( size_t vIndex )

AutoIt:
    VectorOfUchar.Item( $vIndex ) -> retval
    VectorOfUchar( $vIndex ) -> retval

void VectorOfUchar::put_Item( size_t vIndex
                              uchar  vItem )

AutoIt:
    VectorOfUchar.Item( $vIndex ) = $vItem

MapOfStringAndPoint MapOfStringAndPoint::create()

AutoIt:
    MapOfStringAndPoint.create() -> <MapOfStringAndPoint object>

std::shared_ptr<MapOfStringAndPoint> MapOfStringAndPoint::create( std::vector<std::pair<string, dlib::point>> pairs )

AutoIt:
    MapOfStringAndPoint.create( $pairs ) -> retval

dlib::point MapOfStringAndPoint::Get( string key )

AutoIt:
    MapOfStringAndPoint.Get( $key ) -> retval

std::vector<string> MapOfStringAndPoint::Keys()

AutoIt:
    MapOfStringAndPoint.Keys() -> retval

std::vector<dlib::point> MapOfStringAndPoint::Items()

AutoIt:
    MapOfStringAndPoint.Items() -> retval

bool MapOfStringAndPoint::empty()

AutoIt:
    MapOfStringAndPoint.empty() -> retval

size_t MapOfStringAndPoint::size()

AutoIt:
    MapOfStringAndPoint.size() -> retval

size_t MapOfStringAndPoint::max_size()

AutoIt:
    MapOfStringAndPoint.max_size() -> retval

void MapOfStringAndPoint::clear()

AutoIt:
    MapOfStringAndPoint.clear() -> None

void MapOfStringAndPoint::Add( string      key
                               dlib::point value )

AutoIt:
    MapOfStringAndPoint.Add( $key, $value ) -> None

size_t MapOfStringAndPoint::erase( string key )

AutoIt:
    MapOfStringAndPoint.erase( $key ) -> retval

size_t MapOfStringAndPoint::Remove( string key )

AutoIt:
    MapOfStringAndPoint.Remove( $key ) -> retval

void MapOfStringAndPoint::merge( MapOfStringAndPoint other )

AutoIt:
    MapOfStringAndPoint.merge( $other ) -> None

size_t MapOfStringAndPoint::count( string key )

AutoIt:
    MapOfStringAndPoint.count( $key ) -> retval

bool MapOfStringAndPoint::contains( string key )

AutoIt:
    MapOfStringAndPoint.contains( $key ) -> retval

bool MapOfStringAndPoint::has( string key )

AutoIt:
    MapOfStringAndPoint.has( $key ) -> retval

dlib::point MapOfStringAndPoint::get_Item( string vKey )

AutoIt:
    MapOfStringAndPoint.Item( $vKey ) -> retval
    MapOfStringAndPoint( $vKey ) -> retval

void MapOfStringAndPoint::put_Item( string      vKey
                                    dlib::point vItem )

AutoIt:
    MapOfStringAndPoint.Item( $vKey ) = $vItem

VectorOfBox VectorOfBox::create()

AutoIt:
    VectorOfBox.create() -> <VectorOfBox object>

VectorOfBox VectorOfBox::create( size_t size )

AutoIt:
    VectorOfBox.create( $size ) -> <VectorOfBox object>

VectorOfBox VectorOfBox::create( VectorOfBox other )

AutoIt:
    VectorOfBox.create( $other ) -> <VectorOfBox object>

std::vector<int> VectorOfBox::Keys()

AutoIt:
    VectorOfBox.Keys() -> retval

VectorOfBox VectorOfBox::Items()

AutoIt:
    VectorOfBox.Items() -> retval

void VectorOfBox::push_back( dlib::image_dataset_metadata::box value )

AutoIt:
    VectorOfBox.push_back( $value ) -> None

void VectorOfBox::Add( dlib::image_dataset_metadata::box value )

AutoIt:
    VectorOfBox.Add( $value ) -> None

void VectorOfBox::Remove( size_t index )

AutoIt:
    VectorOfBox.Remove( $index ) -> None

dlib::image_dataset_metadata::box VectorOfBox::at( size_t index )

AutoIt:
    VectorOfBox.at( $index ) -> retval

void VectorOfBox::at( size_t                            index
                      dlib::image_dataset_metadata::box value )

AutoIt:
    VectorOfBox.at( $index, $value ) -> None

size_t VectorOfBox::size()

AutoIt:
    VectorOfBox.size() -> retval

bool VectorOfBox::empty()

AutoIt:
    VectorOfBox.empty() -> retval

void VectorOfBox::clear()

AutoIt:
    VectorOfBox.clear() -> None

void VectorOfBox::push_vector( VectorOfBox other )

AutoIt:
    VectorOfBox.push_vector( $other ) -> None

void VectorOfBox::push_vector( VectorOfBox other
                               size_t      count
                               size_t      start = 0 )

AutoIt:
    VectorOfBox.push_vector( $other, $count[, $start] ) -> None

VectorOfBox VectorOfBox::slice( size_t start = 0
                                size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfBox.slice( [$start[, $count]] ) -> retval

void VectorOfBox::sort( void*  comparator
                        size_t start = 0
                        size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfBox.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfBox::sort_variant( void*  comparator
                                size_t start = 0
                                size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfBox.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfBox::start()

AutoIt:
    VectorOfBox.start() -> retval

void* VectorOfBox::end()

AutoIt:
    VectorOfBox.end() -> retval

dlib::image_dataset_metadata::box VectorOfBox::get_Item( size_t vIndex )

AutoIt:
    VectorOfBox.Item( $vIndex ) -> retval
    VectorOfBox( $vIndex ) -> retval

void VectorOfBox::put_Item( size_t                            vIndex
                            dlib::image_dataset_metadata::box vItem )

AutoIt:
    VectorOfBox.Item( $vIndex ) = $vItem

VectorOfImage VectorOfImage::create()

AutoIt:
    VectorOfImage.create() -> <VectorOfImage object>

VectorOfImage VectorOfImage::create( size_t size )

AutoIt:
    VectorOfImage.create( $size ) -> <VectorOfImage object>

VectorOfImage VectorOfImage::create( VectorOfImage other )

AutoIt:
    VectorOfImage.create( $other ) -> <VectorOfImage object>

std::vector<int> VectorOfImage::Keys()

AutoIt:
    VectorOfImage.Keys() -> retval

VectorOfImage VectorOfImage::Items()

AutoIt:
    VectorOfImage.Items() -> retval

void VectorOfImage::push_back( dlib::image_dataset_metadata::image value )

AutoIt:
    VectorOfImage.push_back( $value ) -> None

void VectorOfImage::Add( dlib::image_dataset_metadata::image value )

AutoIt:
    VectorOfImage.Add( $value ) -> None

void VectorOfImage::Remove( size_t index )

AutoIt:
    VectorOfImage.Remove( $index ) -> None

dlib::image_dataset_metadata::image VectorOfImage::at( size_t index )

AutoIt:
    VectorOfImage.at( $index ) -> retval

void VectorOfImage::at( size_t                              index
                        dlib::image_dataset_metadata::image value )

AutoIt:
    VectorOfImage.at( $index, $value ) -> None

size_t VectorOfImage::size()

AutoIt:
    VectorOfImage.size() -> retval

bool VectorOfImage::empty()

AutoIt:
    VectorOfImage.empty() -> retval

void VectorOfImage::clear()

AutoIt:
    VectorOfImage.clear() -> None

void VectorOfImage::push_vector( VectorOfImage other )

AutoIt:
    VectorOfImage.push_vector( $other ) -> None

void VectorOfImage::push_vector( VectorOfImage other
                                 size_t        count
                                 size_t        start = 0 )

AutoIt:
    VectorOfImage.push_vector( $other, $count[, $start] ) -> None

VectorOfImage VectorOfImage::slice( size_t start = 0
                                    size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfImage.slice( [$start[, $count]] ) -> retval

void VectorOfImage::sort( void*  comparator
                          size_t start = 0
                          size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfImage.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfImage::sort_variant( void*  comparator
                                  size_t start = 0
                                  size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfImage.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfImage::start()

AutoIt:
    VectorOfImage.start() -> retval

void* VectorOfImage::end()

AutoIt:
    VectorOfImage.end() -> retval

dlib::image_dataset_metadata::image VectorOfImage::get_Item( size_t vIndex )

AutoIt:
    VectorOfImage.Item( $vIndex ) -> retval
    VectorOfImage( $vIndex ) -> retval

void VectorOfImage::put_Item( size_t                              vIndex
                              dlib::image_dataset_metadata::image vItem )

AutoIt:
    VectorOfImage.Item( $vIndex ) = $vItem

VectorOfPairOfStringAndPoint VectorOfPairOfStringAndPoint::create()

AutoIt:
    VectorOfPairOfStringAndPoint.create() -> <VectorOfPairOfStringAndPoint object>

VectorOfPairOfStringAndPoint VectorOfPairOfStringAndPoint::create( size_t size )

AutoIt:
    VectorOfPairOfStringAndPoint.create( $size ) -> <VectorOfPairOfStringAndPoint object>

VectorOfPairOfStringAndPoint VectorOfPairOfStringAndPoint::create( VectorOfPairOfStringAndPoint other )

AutoIt:
    VectorOfPairOfStringAndPoint.create( $other ) -> <VectorOfPairOfStringAndPoint object>

std::vector<int> VectorOfPairOfStringAndPoint::Keys()

AutoIt:
    VectorOfPairOfStringAndPoint.Keys() -> retval

VectorOfPairOfStringAndPoint VectorOfPairOfStringAndPoint::Items()

AutoIt:
    VectorOfPairOfStringAndPoint.Items() -> retval

void VectorOfPairOfStringAndPoint::push_back( std::pair<string, dlib::point> value )

AutoIt:
    VectorOfPairOfStringAndPoint.push_back( $value ) -> None

void VectorOfPairOfStringAndPoint::Add( std::pair<string, dlib::point> value )

AutoIt:
    VectorOfPairOfStringAndPoint.Add( $value ) -> None

void VectorOfPairOfStringAndPoint::Remove( size_t index )

AutoIt:
    VectorOfPairOfStringAndPoint.Remove( $index ) -> None

std::pair<string, dlib::point> VectorOfPairOfStringAndPoint::at( size_t index )

AutoIt:
    VectorOfPairOfStringAndPoint.at( $index ) -> retval

void VectorOfPairOfStringAndPoint::at( size_t                         index
                                       std::pair<string, dlib::point> value )

AutoIt:
    VectorOfPairOfStringAndPoint.at( $index, $value ) -> None

size_t VectorOfPairOfStringAndPoint::size()

AutoIt:
    VectorOfPairOfStringAndPoint.size() -> retval

bool VectorOfPairOfStringAndPoint::empty()

AutoIt:
    VectorOfPairOfStringAndPoint.empty() -> retval

void VectorOfPairOfStringAndPoint::clear()

AutoIt:
    VectorOfPairOfStringAndPoint.clear() -> None

void VectorOfPairOfStringAndPoint::push_vector( VectorOfPairOfStringAndPoint other )

AutoIt:
    VectorOfPairOfStringAndPoint.push_vector( $other ) -> None

void VectorOfPairOfStringAndPoint::push_vector( VectorOfPairOfStringAndPoint other
                                                size_t                       count
                                                size_t                       start = 0 )

AutoIt:
    VectorOfPairOfStringAndPoint.push_vector( $other, $count[, $start] ) -> None

VectorOfPairOfStringAndPoint VectorOfPairOfStringAndPoint::slice( size_t start = 0
                                                                  size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfPairOfStringAndPoint.slice( [$start[, $count]] ) -> retval

void VectorOfPairOfStringAndPoint::sort( void*  comparator
                                         size_t start = 0
                                         size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfPairOfStringAndPoint.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfPairOfStringAndPoint::sort_variant( void*  comparator
                                                 size_t start = 0
                                                 size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfPairOfStringAndPoint.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfPairOfStringAndPoint::start()

AutoIt:
    VectorOfPairOfStringAndPoint.start() -> retval

void* VectorOfPairOfStringAndPoint::end()

AutoIt:
    VectorOfPairOfStringAndPoint.end() -> retval

std::pair<string, dlib::point> VectorOfPairOfStringAndPoint::get_Item( size_t vIndex )

AutoIt:
    VectorOfPairOfStringAndPoint.Item( $vIndex ) -> retval
    VectorOfPairOfStringAndPoint( $vIndex ) -> retval

void VectorOfPairOfStringAndPoint::put_Item( size_t                         vIndex
                                             std::pair<string, dlib::point> vItem )

AutoIt:
    VectorOfPairOfStringAndPoint.Item( $vIndex ) = $vItem

VectorOfString VectorOfString::create()

AutoIt:
    VectorOfString.create() -> <VectorOfString object>

VectorOfString VectorOfString::create( size_t size )

AutoIt:
    VectorOfString.create( $size ) -> <VectorOfString object>

VectorOfString VectorOfString::create( VectorOfString other )

AutoIt:
    VectorOfString.create( $other ) -> <VectorOfString object>

std::vector<int> VectorOfString::Keys()

AutoIt:
    VectorOfString.Keys() -> retval

VectorOfString VectorOfString::Items()

AutoIt:
    VectorOfString.Items() -> retval

void VectorOfString::push_back( string value )

AutoIt:
    VectorOfString.push_back( $value ) -> None

void VectorOfString::Add( string value )

AutoIt:
    VectorOfString.Add( $value ) -> None

void VectorOfString::Remove( size_t index )

AutoIt:
    VectorOfString.Remove( $index ) -> None

string VectorOfString::at( size_t index )

AutoIt:
    VectorOfString.at( $index ) -> retval

void VectorOfString::at( size_t index
                         string value )

AutoIt:
    VectorOfString.at( $index, $value ) -> None

size_t VectorOfString::size()

AutoIt:
    VectorOfString.size() -> retval

bool VectorOfString::empty()

AutoIt:
    VectorOfString.empty() -> retval

void VectorOfString::clear()

AutoIt:
    VectorOfString.clear() -> None

void VectorOfString::push_vector( VectorOfString other )

AutoIt:
    VectorOfString.push_vector( $other ) -> None

void VectorOfString::push_vector( VectorOfString other
                                  size_t         count
                                  size_t         start = 0 )

AutoIt:
    VectorOfString.push_vector( $other, $count[, $start] ) -> None

VectorOfString VectorOfString::slice( size_t start = 0
                                      size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfString.slice( [$start[, $count]] ) -> retval

void VectorOfString::sort( void*  comparator
                           size_t start = 0
                           size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfString.sort( $comparator[, $start[, $count]] ) -> None

void VectorOfString::sort_variant( void*  comparator
                                   size_t start = 0
                                   size_t count = this->__self->get()->size() )

AutoIt:
    VectorOfString.sort_variant( $comparator[, $start[, $count]] ) -> None

void* VectorOfString::start()

AutoIt:
    VectorOfString.start() -> retval

void* VectorOfString::end()

AutoIt:
    VectorOfString.end() -> retval

string VectorOfString::get_Item( size_t vIndex )

AutoIt:
    VectorOfString.Item( $vIndex ) -> retval
    VectorOfString( $vIndex ) -> retval

void VectorOfString::put_Item( size_t vIndex
                               string vItem )

AutoIt:
    VectorOfString.Item( $vIndex ) = $vItem
